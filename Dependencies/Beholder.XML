<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Beholder</name>
    </assembly>
    <members>
        <member name="T:Beholder.Core.ClearDepthStencilFlags">
            <summary>
            <para>
            Specifies the parts of the depth stencil to clear.
            </para>
            <para>
            Try to avoid using values other than <see cref="F:Beholder.Core.ClearDepthStencilFlags.All"/> (see remarks).
            </para>
            </summary>
            <remarks>
            Even though option to clear only a part of a depth-stencil texture is available, Both Depth and Stencil parts have to be cleared every frame. 
            Otherwise, multi-GPU performance may drop significantly.
            </remarks>
        </member>
        <member name="F:Beholder.Core.ClearDepthStencilFlags.DepthOnly">
            <summary>
            Clear the depth buffer.
            </summary>
        </member>
        <member name="F:Beholder.Core.ClearDepthStencilFlags.StencilOnly">
            <summary>
            Clear the stencil buffer.
            </summary>
        </member>
        <member name="F:Beholder.Core.ClearDepthStencilFlags.All">
            <summary>
            Clear the whole buffer.
            </summary>
        </member>
        <member name="T:Beholder.EyeCreationFlags">
            <summary>
            Specifies additional options for Eye creation.
            </summary>
        </member>
        <member name="F:Beholder.EyeCreationFlags.None">
            <summary>
            Create an Eye as it is.
            </summary>
        </member>
        <member name="F:Beholder.EyeCreationFlags.ValidationLayer">
            <summary>
            Wrap an Eye into a validation layer, which will notify you of Beholder API misuse.
            </summary>
        </member>
        <member name="T:Beholder.EyeCreator">
            <summary>
            Contains helper methods for creating IEye implementations.
            </summary>
        </member>
        <member name="M:Beholder.EyeCreator.FromAssembly(System.String,System.String,Beholder.EyeCreationFlags)">
            <summary>
            Creates an IEye implementation by its type name and containing assembly path.
            </summary>
            <param name="assemblyPath">Path to an assembly file that stores the IEye implementation.</param>
            <param name="fullTypeName">Full type name of the IEye implementation.</param>
            <param name="flags">Flags that specify additional options for IEye implementation creation.</param>
        </member>
        <member name="T:Beholder.IDeviceChildCreator">
            <summary>
            A <see cref="T:Beholder.IDevice"/> 'submenu' responsible for creating new <see cref="T:Beholder.IDeviceChild"/>s.
            </summary>
        </member>
        <member name="T:Beholder.IDisposableOnce">
            <summary>
            Represents a disposable object that can be disposed only once.
            </summary>
        </member>
        <member name="P:Beholder.IDisposableOnce.IsDisposed">
            <summary>
            Indicates whether the object was already disposed.
            </summary>
        </member>
        <member name="T:Beholder.Platform.FeatureLevel">
            <summary>
            Feature level supported by the adapter.
            </summary>
        </member>
        <member name="T:Beholder.Platform.IFormatInfo">
            <summary>
            Describes a color-alpha format.
            </summary>
        </member>
        <member name="P:Beholder.Platform.IFormatInfo.ID">
            <summary>
            ID of the format.
            </summary>
        </member>
        <member name="P:Beholder.Platform.IFormatInfo.NumColors">
            <summary>
            Number of color channels (not including alpha) suppoted by the format.
            </summary>
        </member>
        <member name="P:Beholder.Platform.IFormatInfo.ColorBits">
            <summary>
            Number of bits that contain color data.
            </summary>
        </member>
        <member name="P:Beholder.Platform.IFormatInfo.AlphaBits">
            <summary>
            Number of bits that contain alpha data.
            </summary>
        </member>
        <member name="P:Beholder.Platform.IFormatInfo.TotalBits">
            <summary>
            Total bits allocated for one pixel or texel of this format (including padding).
            </summary>
        </member>
        <member name="P:Beholder.Platform.IFormatInfo.ColorFormatType">
            <summary>
            Type of the color data.
            </summary>
        </member>
        <member name="P:Beholder.Platform.IFormatInfo.AlphaFormatType">
            <summary>
            Type of the alpha data.
            </summary>
        </member>
        <member name="P:Beholder.Platform.IFormatInfo.ExplicitFormat">
            <summary>
            Corresponding explicit format if one exists. 
            </summary>
        </member>
        <member name="P:Beholder.Platform.IFormatInfo.Description">
            <summary>
            A string that contains a format description.
            </summary>
        </member>
        <member name="P:Beholder.Platform.IFormatInfo.Flags">
            <summary>
            Flags specifying additional format features and drawbacks.
            </summary>
        </member>
        <member name="T:Beholder.Platform.ModeRotation">
            <summary>
            Flags that indicate how the back buffers should be rotated to fit the physical rotation of a monitor.
            </summary>
        </member>
        <member name="F:Beholder.Platform.ModeRotation.Unspecified">
            <summary>
            Unspecified rotation.
            </summary>
        </member>
        <member name="F:Beholder.Platform.ModeRotation.Identity">
            <summary>
            Specifies no rotation.
            </summary>
        </member>
        <member name="F:Beholder.Platform.ModeRotation.Rotate90">
            <summary>
            Specifies 90 degrees of rotation.
            </summary>
        </member>
        <member name="F:Beholder.Platform.ModeRotation.Rotate180">
            <summary>
            Specifies 180 degrees of rotation.
            </summary>
        </member>
        <member name="F:Beholder.Platform.ModeRotation.Rotate270">
            <summary>
            Specifies 270 degrees of rotation.
            </summary>
        </member>
        <member name="T:Beholder.Resources.IResource">
            <summary>
            Represents an explicitly disposable resource stored in video memory.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IResource.Dimension">
            <summary>
            Get the dimension of the resource.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IResource.Usage">
            <summary>
            Identify how the resource is expected to be read from and written to. 
            Frequency of update is a key factor.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IResource.BindFlags">
            <summary>
            Identify how the buffer will be bound to the pipeline. 
            Flags can be combined with a logical OR.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IResource.MiscFlags">
            <summary>
            Flags that identify other, less common resource options. 
            These flags can be combined with a logical OR.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IResource.ExtraFlags">
            <summary>
            Extra flags that specify use-cases of the resource for less flexible APIs (i.e. D3D9).
            Flags can be combined with a logical OR.
            </summary>
        </member>
        <member name="P:Beholder.Resources.ITexture.FormatID">
            <summary>
            Texture format ID.
            </summary>
        </member>
        <member name="P:Beholder.Resources.ITexture.MipLevels">
            <summary>
            The maximum number of mipmap levels in the texture.
            Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.
            </summary>
        </member>
        <member name="T:Beholder.Shaders.IComputeShader">
            <summary>
            An executable program (a compute shader) that controls the compute-shader stage.
            </summary>
        </member>
        <member name="T:Beholder.Shaders.IShader">
            <summary>
            An executable program that controls one of the graphical pipeline stages.
            </summary>
        </member>
        <member name="T:Beholder.Resources.BufferDescription">
            <summary>
            Describes a buffer resource.
            </summary>
        </member>
        <member name="F:Beholder.Resources.BufferDescription.SizeInBytes">
            <summary>
            Size of the buffer in bytes.
            </summary>
        </member>
        <member name="F:Beholder.Resources.BufferDescription.Usage">
            <summary>
            Identify how the resource is expected to be read from and written to. 
            Frequency of update is a key factor.
            </summary>
        </member>
        <member name="F:Beholder.Resources.BufferDescription.BindFlags">
            <summary>
            Identify how the buffer will be bound to the pipeline. 
            Flags can be combined with a logical OR.
            </summary>
        </member>
        <member name="F:Beholder.Resources.BufferDescription.MiscFlags">
            <summary>
            Flags that identify other, less common resource options. 
            These flags can be combined with a logical OR.
            </summary>
        </member>
        <member name="F:Beholder.Resources.BufferDescription.ExtraFlags">
            <summary>
            Extra flags that specify use-cases of the resource for less flexible APIs (i.e. D3D9).
            Flags can be combined with a logical OR.
            </summary>
        </member>
        <member name="F:Beholder.Resources.BufferDescription.StructureByteStride">
            <summary>
            The size of the structure (in bytes) when it represents a structured buffer.
            </summary>
        </member>
        <member name="T:Beholder.Resources.DepthStencilViewDescription">
            <summary>
            Describes a depth-stencil view.
            </summary>
        </member>
        <member name="F:Beholder.Resources.DepthStencilViewDescription.Dimension">
            <summary>
            Type of the resource to be viewed.
            </summary>
        </member>
        <member name="F:Beholder.Resources.DepthStencilViewDescription.FormatID">
            <summary>
            Data format ID.
            </summary>
        </member>
        <member name="F:Beholder.Resources.DepthStencilViewDescription.Flags">
            <summary>
            Describes whether the texture is read only. 
            Pass <see cref="F:Beholder.Resources.DepthStencilViewFlags.None"/> to specify that it is not read only.
            </summary>
        </member>
        <member name="F:Beholder.Resources.DepthStencilViewDescription.MipSlice">
            <summary>
            Index of the mip level to be used by the view.
            Not used for multisampled textures.
            </summary>
        </member>
        <member name="F:Beholder.Resources.DepthStencilViewDescription.FirstArraySlice">
            <summary>
            Index of the first texture to be used by the view in an array of textures.
            Only used for texture arrays.
            </summary>
        </member>
        <member name="F:Beholder.Resources.DepthStencilViewDescription.ArraySize">
            <summary>
            Number of textures in the array to be used by the view.
            Only used for texture arrays.
            </summary>
        </member>
        <member name="T:Beholder.Resources.DepthStencilViewDimension">
            <summary>
            Specifies how to access a resource used in a depth-stencil view.
            </summary>
        </member>
        <member name="F:Beholder.Resources.DepthStencilViewDimension.Unknown">
            <summary>
            Not a valid value and is not used.
            </summary>
        </member>
        <member name="F:Beholder.Resources.DepthStencilViewDimension.Texture1D">
            <summary>
            The resource will be accessed as a 1D texture.
            </summary>
        </member>
        <member name="F:Beholder.Resources.DepthStencilViewDimension.Texture1DArray">
            <summary>
            The resource will be accessed as an array of 1D textures.
            </summary>
        </member>
        <member name="F:Beholder.Resources.DepthStencilViewDimension.Texture2D">
            <summary>
            The resource will be accessed as a 2D texture.
            </summary>
        </member>
        <member name="F:Beholder.Resources.DepthStencilViewDimension.Texture2DArray">
            <summary>
            The resource will be accessed as an array of 2D textures.
            </summary>
        </member>
        <member name="F:Beholder.Resources.DepthStencilViewDimension.Texture2DMultisampled">
            <summary>
            The resource will be accessed as a 2D texture with multisampling.
            </summary>
        </member>
        <member name="F:Beholder.Resources.DepthStencilViewDimension.Texture2DMultisampledArray">
            <summary>
            The resource will be accessed as an array of 2D textures with multisampling.
            </summary>
        </member>
        <member name="T:Beholder.Resources.DepthStencilViewFlags">
            <summary>
            Depth-stencil view options.
            </summary>
            <remarks>
            Limiting a depth-stencil buffer to read-only access allows more than one depth-stencil view to be bound to the pipeline simultaneously, 
            since it is not possible to have a read/write conflicts between separate views.
            </remarks>
        </member>
        <member name="F:Beholder.Resources.DepthStencilViewFlags.None">
            <summary>
            No flags specified.
            </summary>
        </member>
        <member name="F:Beholder.Resources.DepthStencilViewFlags.ReadonlyDepth">
            <summary>
            Indicates that depth values are read only.
            </summary>
        </member>
        <member name="F:Beholder.Resources.DepthStencilViewFlags.ReadonlyStencil">
            <summary>
            Indicates that stencil values are read only.
            </summary>
        </member>
        <member name="T:Beholder.Resources.ExtraFlags">
            <summary>
            Extra flags that specify use-cases of the resource for less flexible APIs (i.e. D3D9).
            </summary>
        </member>
        <member name="F:Beholder.Resources.ExtraFlags.None">
            <summary>
            No flags specified.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ExtraFlags.Points">
            <summary>
            Vertex buffer contains a list of points, used to draw point sprites.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ExtraFlags.SixteenBitIndices">
            <summary>
            Index buffer contains sixteen bit indices.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ExtraFlags.UniformInt">
            <summary>
            Uniform buffer contains integer data.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ExtraFlags.UniformBool">
            <summary>
            Uniform buffer contains boolean data.
            </summary>
        </member>
        <member name="T:Beholder.Resources.IDepthStencilView">
            <summary>
            A view that represenst a resource that is used for depth-stencil testing.
            </summary>
        </member>
        <member name="T:Beholder.Resources.IResourceView">
            <summary>
            Represents a view on a resource that is used to bind the resource to the pipeline.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IResourceView.Resource">
            <summary>
            Gets a resource that is being viewed.
            </summary>
        </member>
        <member name="M:Beholder.Resources.IDepthStencilView.GetDescription(Beholder.Resources.DepthStencilViewDescription@)">
            <summary>
            Gets a description of the view.
            </summary>
            <param name="description">Variable to fill with the description data.</param>
        </member>
        <member name="P:Beholder.Resources.IDepthStencilView.Dimension">
            <summary>
            Type of the resource to be viewed.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IDepthStencilView.FormatID">
            <summary>
            Data format ID.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IDepthStencilView.Flags">
            <summary>
            Describes whether the texture is read only. 
            Pass <see cref="F:Beholder.Resources.DepthStencilViewFlags.None"/> to specify that it is not read only.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IDepthStencilView.MipSlice">
            <summary>
            Index of the mip level to be used by the view.
            Not used for multisampled textures.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IDepthStencilView.FirstArraySlice">
            <summary>
            Index of the first texture to be used by the view in an array of textures.
            Only used for texture arrays.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IDepthStencilView.ArraySize">
            <summary>
            Number of textures in the array to be used by the view.
            Only used for texture arrays.
            </summary>
        </member>
        <member name="T:Beholder.Resources.IRenderTargetView">
            <summary>
            A view that represents a resource that can be rendered to.
            </summary>
        </member>
        <member name="M:Beholder.Resources.IRenderTargetView.GetDescription(Beholder.Resources.RenderTargetViewDescription@)">
            <summary>
            Gets a description of the view.
            </summary>
            <param name="description">Variable to fill with the description data.</param>
        </member>
        <member name="P:Beholder.Resources.IRenderTargetView.Dimension">
            <summary>
            Type of the resource to be viewed.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IRenderTargetView.FormatID">
            <summary>
            Data format ID.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IRenderTargetView.ElementOffset">
            <summary>
            Number of bytes between the beginning of the buffer and the first element to access.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IRenderTargetView.ElementWidth">
            <summary>
            The width of each element (in bytes). 
            This can be determined from the format stored in the render-target-view description.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IRenderTargetView.MipSlice">
            <summary>
            Index of the mip level to be used by the view.
            Not used for buffers and multisampled textures.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IRenderTargetView.FirstArraySlice">
            <summary>
            Index of the first texture to be used by the view in an array of textures.
            Only used for texture arrays.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IRenderTargetView.ArraySize">
            <summary>
            Number of textures in the array to be used by the view.
            Only used for texture arrays.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IRenderTargetView.FirstDepthSlice">
            <summary>
            First depth level to be used by the view.
            Only used by 3D textures.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IRenderTargetView.DepthSliceCount">
            <summary>
            Number of depth levels to be used by the view, starting from FirstDepthSlice. 
            A value of -1 indicates all of the slices along the w axis, starting from FirstDepthSlice.
            Only used by 3D textures.
            </summary>
        </member>
        <member name="T:Beholder.Core.VertexLayoutClassification">
            <summary>
            Type of data contained in an input vertex buffer.
            </summary>
        </member>
        <member name="T:Beholder.Core.IBlendState">
            <summary>
            Blending state for the output-merger stage.
            </summary>
        </member>
        <member name="M:Beholder.Core.IBlendState.GetDescriptionForTarget(System.Int32)">
            <summary>
            Gets the blend descriptions for the render targets.
            if <see cref="P:Beholder.Core.IBlendState.IndependentBlendEnable"/> property is set to False, 
            GetDescriptionForTarget(0) contains the description for every render target.
            </summary>
            <param name="renderTargetIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Beholder.Core.IBlendState.GetDescription(Beholder.Core.BlendDescription@)">
            <summary>
            Gets a description of the blend state.
            </summary>
            <param name="description">Variable to fill with the description data.</param>
        </member>
        <member name="P:Beholder.Core.IBlendState.AlphaToCoverageEnable">
            <summary>
            Determines whether or not to use alpha-to-coverage as a multisampling technique when setting a pixel to a rendertarget.
            </summary>
        </member>
        <member name="P:Beholder.Core.IBlendState.IndependentBlendEnable">
            <summary>
            Set to True to enable independent blending in simultaneous render targets. 
            If set to False, only the RenderTargetBlend0 members are used. RenderTargetBlends[1..7] are ignored.
            </summary>
        </member>
        <member name="T:Beholder.Core.IDepthStencilState">
            <summary>
            Depth-stencil state which sets up the depth-stencil test for the output-merger stage.
            </summary>
        </member>
        <member name="M:Beholder.Core.IDepthStencilState.GetDescription(Beholder.Core.DepthStencilDescription@)">
            <summary>
            Gets a description of the depth-stencil state.
            </summary>
            <param name="description">Variable to fill with the description data.</param>
        </member>
        <member name="P:Beholder.Core.IDepthStencilState.FrontFaceStencilOp">
            <summary>
            Identifies how to use the results of the depth test and the stencil test for pixels whose surface normal is facing towards the camera.
            </summary>
        </member>
        <member name="P:Beholder.Core.IDepthStencilState.BackFaceStencilOp">
            <summary>
            Identifies how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away from the camera.
            </summary>
        </member>
        <member name="P:Beholder.Core.IDepthStencilState.DepthEnable">
            <summary>
            Enable depth testing.
            </summary>
        </member>
        <member name="P:Beholder.Core.IDepthStencilState.DepthWriteEnable">
            <summary>
            Enable writing to the depth buffer.
            </summary>
        </member>
        <member name="P:Beholder.Core.IDepthStencilState.DepthFunction">
            <summary>
            A function that compares depth data against existing depth data.
            </summary>
        </member>
        <member name="P:Beholder.Core.IDepthStencilState.StencilEnable">
            <summary>
            Enable stencil testing.
            </summary>
        </member>
        <member name="P:Beholder.Core.IDepthStencilState.StencilReadMask">
            <summary>
            Identifies a portion of the depth-stencil buffer for reading stencil data.
            </summary>
        </member>
        <member name="P:Beholder.Core.IDepthStencilState.StencilWriteMask">
            <summary>
            Identifies a portion of the depth-stencil buffer for writing stencil data.
            </summary>
        </member>
        <member name="T:Beholder.Core.IDeviceContext">
            <summary>
            Represents a device context which generates rendering commands.
            </summary>
        </member>
        <member name="T:Beholder.Core.IRasterizerState">
            <summary>
            Rasterizer state for the rasterizer stage.
            </summary>
        </member>
        <member name="M:Beholder.Core.IRasterizerState.GetDescription(Beholder.Core.RasterizerDescription@)">
            <summary>
            Gets a description of the rasterizer state.
            </summary>
            <param name="description">Variable to fill with the description data.</param>
        </member>
        <member name="P:Beholder.Core.IRasterizerState.DepthBias">
            <summary>
            <para>Depth value added to a given pixel.</para>
            <para>Beware that the depth bias behaves diferenty on different GPUs.</para>
            </summary>
        </member>
        <member name="P:Beholder.Core.IRasterizerState.DepthBiasClamp">
            <summary>
            <para>Maximum depth bias of a pixel.</para>
            <para>Beware that the depth bias behaves diferenty on different GPUs.</para>
            </summary>
        </member>
        <member name="P:Beholder.Core.IRasterizerState.SlopeScaledDepthBias">
            <summary>
            <para>Scalar on a given pixel's slope.</para>
            <para>Beware that the depth bias behaves diferenty on different GPUs.</para>
            </summary>
        </member>
        <member name="P:Beholder.Core.IRasterizerState.FillMode">
            <summary>
            Determines the fill mode to use when rendering.
            </summary>
        </member>
        <member name="P:Beholder.Core.IRasterizerState.CullMode">
            <summary>
            Indicates triangles facing the specified direction are not drawn.
            </summary>
        </member>
        <member name="P:Beholder.Core.IRasterizerState.DepthClipEnable">
            <summary>
            Enable clipping based on distance.
            </summary>
        </member>
        <member name="P:Beholder.Core.IRasterizerState.ScissorEnable">
            <summary>
            Enable scissor-rectangle culling. All pixels ouside an active scissor rectangle are culled.
            </summary>
        </member>
        <member name="P:Beholder.Core.IRasterizerState.MultisampleEnable">
            <summary>
            Enable multisample antialiasing.
            </summary>
        </member>
        <member name="P:Beholder.Core.IRasterizerState.AntialiasedLineEnable">
            <summary>
            Enable line antialiasing; only applies if doing line drawing and MultisampleEnable is false.
            </summary>
        </member>
        <member name="P:Beholder.Core.IRasterizerState.FrontFaceWinding">
            <summary>
            Determines which triangles are considered front-facing and which are back-facing.
            </summary>
        </member>
        <member name="T:Beholder.Core.ISamplerState">
            <summary>
            Sampler state for a texture.
            </summary>
        </member>
        <member name="M:Beholder.Core.ISamplerState.GetDescription(Beholder.Core.SamplerDescription@)">
            <summary>
            Gets a description of the sampler state.
            </summary>
            <param name="description">Variable to fill with the description data.</param>
        </member>
        <member name="T:Beholder.Resources.IBuffer">
            <summary>
            Represents a buffer resource, which is unstructured memory. Buffers typically store vertex or index data.
            </summary>
        </member>
        <member name="M:Beholder.Resources.IBuffer.GetDescription(Beholder.Resources.BufferDescription@)">
            <summary>
            Gets a description of the buffer.
            </summary>
            <param name="description">Variable to fill with the description data.</param>
        </member>
        <member name="P:Beholder.Resources.IBuffer.SizeInBytes">
            <summary>
            Size of the buffer in bytes.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IBuffer.StructureByteStride">
            <summary>
            The size of the structure (in bytes) when it represents a structured buffer.
            </summary>
        </member>
        <member name="T:Beholder.Resources.IShaderResourceView">
            <summary>
            A view that represents a resource that can be accessed by the shader in a read-only way (e.g. texture sampling).
            </summary>
        </member>
        <member name="M:Beholder.Resources.IShaderResourceView.GetDescription(Beholder.Resources.ShaderResourceViewDescription@)">
            <summary>
            Gets a description of the view.
            </summary>
            <param name="description">Variable to fill with the description data.</param>
        </member>
        <member name="P:Beholder.Resources.IShaderResourceView.Dimension">
            <summary>
            Type of the resource to be viewed.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IShaderResourceView.FormatID">
            <summary>
            Data format ID.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IShaderResourceView.FirstElement">
            <summary>
            Index of the first buffer element to be used by the view.
            Only used for buffers. 
            </summary>
        </member>
        <member name="P:Beholder.Resources.IShaderResourceView.ElementCount">
            <summary>
            Number of buffer elements in the resource.
            Only used for buffers. 
            </summary>
        </member>
        <member name="P:Beholder.Resources.IShaderResourceView.ExtendedBufferFlags">
            <summary>
            Options for binding a raw buffer (see <see cref="T:Beholder.Resources.ShaderResourceViewExtendedBufferFlags"/>).
            Only used for buffers.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IShaderResourceView.MostDetailedMip">
            <summary>
            Index of the most detailed mipmap level to use. 
            This number is between 0 and MipLevels of the texture - 1.
            Not used for buffers and multisampled textures.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IShaderResourceView.MipLevels">
            <summary>
            The maximum number of mipmap levels for the view of the texture.
            Set to -1 to indicate all the mipmap levels from MostDetailedMip on down to least detailed.
            Not used for buffers and multisampled textures.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IShaderResourceView.FirstArraySlice">
            <summary>
            Index of the first texture to be used by the view in an array of textures.
            Only used for texture arrays.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IShaderResourceView.ArraySize">
            <summary>
            Number of textures in the array to be used by the view.
            For cube textures, this value must be divisible by 6.
            Only used for texture arrays.
            </summary>
        </member>
        <member name="T:Beholder.Resources.ITexture1D">
            <summary>
            Represents a 1D texture resource that contains texel data, which is structured memory.
            </summary>
        </member>
        <member name="M:Beholder.Resources.ITexture1D.GetDescription(Beholder.Resources.Texture1DDescription@)">
            <summary>
            Gets a description of the texture.
            </summary>
            <param name="description">Variable to fill with the description data.</param>
        </member>
        <member name="P:Beholder.Resources.ITexture1D.Width">
            <summary>
            Texture width (in texels).
            </summary>
        </member>
        <member name="P:Beholder.Resources.ITexture1D.ArraySize">
            <summary>
            Number of textures in the array.
            </summary>
        </member>
        <member name="T:Beholder.Resources.ITexture2D">
            <summary>
            Represents a 2D texture resource that contains texel data, which is structured memory.
            </summary>
        </member>
        <member name="M:Beholder.Resources.ITexture2D.GetDescription(Beholder.Resources.Texture2DDescription@)">
            <summary>
            Gets a description of the texture.
            </summary>
            <param name="texture2DDesc">Variable to fill with the description data.</param>
        </member>
        <member name="P:Beholder.Resources.ITexture2D.Width">
            <summary>
            Texture width (in texels).
            </summary>
        </member>
        <member name="P:Beholder.Resources.ITexture2D.Height">
            <summary>
            Texture height (in texels).
            </summary>
        </member>
        <member name="P:Beholder.Resources.ITexture2D.ArraySize">
            <summary>
            Number of textures in the array.
            </summary>
        </member>
        <member name="P:Beholder.Resources.ITexture2D.Sampling">
            <summary>
            Structure that specifies multisampling parameters for the texture. See <see cref="P:Beholder.Resources.ITexture2D.Sampling"/>.
            </summary>
        </member>
        <member name="T:Beholder.Resources.ITexture3D">
            <summary>
            Represents a 3D texture resource that contains texel data, which is structured memory.
            </summary>
        </member>
        <member name="M:Beholder.Resources.ITexture3D.GetDescription(Beholder.Resources.Texture3DDescription@)">
            <summary>
            Gets a description of the texture.
            </summary>
            <param name="description">Variable to fill with the description data.</param>
        </member>
        <member name="P:Beholder.Resources.ITexture3D.Width">
            <summary>
            Texture width (in texels).
            </summary>
        </member>
        <member name="P:Beholder.Resources.ITexture3D.Height">
            <summary>
            Texture height (in texels).
            </summary>
        </member>
        <member name="P:Beholder.Resources.ITexture3D.Depth">
            <summary>
            Texture depth (in texels).
            </summary>
        </member>
        <member name="T:Beholder.Resources.IUnorderedAccessView">
            <summary>
            A view that represents a resource that can be accessed by the shader in an unordered way.
            </summary>
        </member>
        <member name="M:Beholder.Resources.IUnorderedAccessView.GetDesc(Beholder.Resources.UnorderedAccessViewDescription@)">
            <summary>
            Gets a description of the view.
            </summary>
            <param name="description">Variable to fill with the description data.</param>
        </member>
        <member name="P:Beholder.Resources.IUnorderedAccessView.Dimension">
            <summary>
            Type of the resource to be viewed.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IUnorderedAccessView.FormatID">
            <summary>
            Data format ID.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IUnorderedAccessView.FirstElement">
            <summary>
            Index of the first buffer element to be used by the view.
            Only used for buffers.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IUnorderedAccessView.ElementCount">
            <summary>
            Number of buffer elements in the resource.
            For structured buffers, this is the number of structures in the buffer.
            Only used for buffers.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IUnorderedAccessView.BufferFlags">
            <summary>
            View options for the buffer resource.
            Only used for buffers (obviously).
            </summary>
        </member>
        <member name="P:Beholder.Resources.IUnorderedAccessView.MipSlice">
            <summary>
            Index of the mip level to be used by the view.
            Not used for buffers.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IUnorderedAccessView.FirstArraySlice">
            <summary>
            Index of the first texture to be used by the view in an array of textures.
            Only used for texture arrays.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IUnorderedAccessView.ArraySize">
            <summary>
            Number of textures in the array to be used by the view.
            Only used for texture arrays.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IUnorderedAccessView.FirstDepthSlice">
            <summary>
            First depth level to be used by the view.
            Only used by 3D textures.
            </summary>
        </member>
        <member name="P:Beholder.Resources.IUnorderedAccessView.DepthSliceCount">
            <summary>
            Number of depth levels to be used by the view, starting from FirstDepthSlice.
            Only used by 3D textures.
            </summary>
        </member>
        <member name="T:Beholder.Resources.RenderTargetViewDescription">
            <summary>
            Describes a render target view.
            </summary>
        </member>
        <member name="F:Beholder.Resources.RenderTargetViewDescription.Dimension">
            <summary>
            Type of the resource to be viewed.
            </summary>
        </member>
        <member name="F:Beholder.Resources.RenderTargetViewDescription.FormatID">
            <summary>
            Data format ID.
            </summary>
        </member>
        <member name="F:Beholder.Resources.RenderTargetViewDescription.ElementOffset">
            <summary>
            Number of bytes between the beginning of the buffer and the first element to access.
            </summary>
        </member>
        <member name="F:Beholder.Resources.RenderTargetViewDescription.ElementWidth">
            <summary>
            The width of each element (in bytes). 
            This can be determined from the format stored in the render-target-view description.
            </summary>
        </member>
        <member name="F:Beholder.Resources.RenderTargetViewDescription.MipSlice">
            <summary>
            Index of the mip level to be used by the view.
            Not used for buffers and multisampled textures.
            </summary>
        </member>
        <member name="F:Beholder.Resources.RenderTargetViewDescription.FirstArraySlice">
            <summary>
            Index of the first texture to be used by the view in an array of textures.
            Only used for texture arrays.
            </summary>
        </member>
        <member name="F:Beholder.Resources.RenderTargetViewDescription.ArraySize">
            <summary>
            Number of textures in the array to be used by the view.
            Only used for texture arrays.
            </summary>
        </member>
        <member name="F:Beholder.Resources.RenderTargetViewDescription.FirstDepthSlice">
            <summary>
            First depth level to be used by the view.
            Only used by 3D textures.
            </summary>
        </member>
        <member name="F:Beholder.Resources.RenderTargetViewDescription.DepthSliceCount">
            <summary>
            Number of depth levels to be used by the view, starting from FirstDepthSlice. 
            A value of -1 indicates all of the slices along the w axis, starting from FirstDepthSlice.
            Only used by 3D textures.
            </summary>
        </member>
        <member name="T:Beholder.Resources.RenderTargetViewDimension">
            <summary>
            These flags identify the type of resource that will be viewed as a render target.
            </summary>
        </member>
        <member name="F:Beholder.Resources.RenderTargetViewDimension.Unknown">
            <summary>
            Do not use this value, as it will cause view creation to fail.
            </summary>
        </member>
        <member name="F:Beholder.Resources.RenderTargetViewDimension.Buffer">
            <summary>
            The resource will be accessed as a buffer.
            </summary>
        </member>
        <member name="F:Beholder.Resources.RenderTargetViewDimension.Texture1D">
            <summary>
            The resource will be accessed as a 1D texture.
            </summary>
        </member>
        <member name="F:Beholder.Resources.RenderTargetViewDimension.Texture1DArray">
            <summary>
            The resource will be accessed as an array of 1D textures.
            </summary>
        </member>
        <member name="F:Beholder.Resources.RenderTargetViewDimension.Texture2D">
            <summary>
            The resource will be accessed as a 2D texture.
            </summary>
        </member>
        <member name="F:Beholder.Resources.RenderTargetViewDimension.Texture2DArray">
            <summary>
            The resource will be accessed as an array of 2D textures.
            </summary>
        </member>
        <member name="F:Beholder.Resources.RenderTargetViewDimension.Texture2DMultisampled">
            <summary>
            The resource will be accessed as a 2D texture with multisampling.
            </summary>
        </member>
        <member name="F:Beholder.Resources.RenderTargetViewDimension.Texture2DMultisampledArray">
            <summary>
            The resource will be accessed as an array of 2D textures with multisampling.
            </summary>
        </member>
        <member name="F:Beholder.Resources.RenderTargetViewDimension.Texture3D">
            <summary>
            The resource will be accessed as a 3D texture.
            </summary>
        </member>
        <member name="T:Beholder.Resources.ResourceBindingException">
            <summary>
            Represents errors that are caused by trying to create a resource view upon a resource that was not created with the appropriate bind flag.
            </summary>
        </member>
        <member name="M:Beholder.Resources.ResourceBindingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beholder.Resources.ResourceBindingException"/> class with the specified error message.
            </summary>
        </member>
        <member name="M:Beholder.Resources.ResourceBindingException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Beholder.Resources.ResourceBindingException"/> class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="T:Beholder.Resources.SubresourceData">
            <summary>
            Specifies data for initializing or updating a subresource.
            </summary>
        </member>
        <member name="F:Beholder.Resources.SubresourceData.RowByteAlignment">
            <summary>
            Must be 0 for Buffers and 1D Textures. Must be 1, 2, 4, or 8 for 2D and 3D Textures
            </summary>
        </member>
        <member name="T:Beholder.Resources.ShaderResourceViewDescription">
            <summary>
            Describes a shader resource view.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDescription.Dimension">
            <summary>
            Type of the resource to be viewed.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDescription.FormatID">
            <summary>
            Data format ID.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDescription.FirstElement">
            <summary>
            Index of the first buffer element to be used by the view.
            Only used for buffers. 
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDescription.ElementCount">
            <summary>
            Number of buffer elements in the resource.
            Only used for buffers. 
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDescription.ExtendedBufferFlags">
            <summary>
            Options for binding a raw buffer (see <see cref="T:Beholder.Resources.ShaderResourceViewExtendedBufferFlags"/>).
            Only used for buffers.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDescription.MostDetailedMip">
            <summary>
            Index of the most detailed mipmap level to use. 
            This number is between 0 and MipLevels of the texture - 1.
            Not used for buffers and multisampled textures.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDescription.MipLevels">
            <summary>
            The maximum number of mipmap levels for the view of the texture.
            Set to -1 to indicate all the mipmap levels from MostDetailedMip on down to least detailed.
            Not used for buffers and multisampled textures.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDescription.FirstArraySlice">
            <summary>
            Index of the first texture to be used by the view in an array of textures.
            Only used for texture arrays.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDescription.ArraySize">
            <summary>
            Number of textures in the array to be used by the view.
            For cube textures, this value must be divisible by 6.
            Only used for texture arrays.
            </summary>
        </member>
        <member name="T:Beholder.Resources.ShaderResourceViewDimension">
            <summary>
            These flags identify the type of resource that will be viewed as a shader resource.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDimension.Unknown">
            <summary>
            The type is unknown.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDimension.Buffer">
            <summary>
            The resource is a buffer.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDimension.Texture1D">
            <summary>
            The resource is a 1D texture.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDimension.Texture1DArray">
            <summary>
            The resource is an array of 1D textures.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDimension.Texture2D">
            <summary>
            The resource is a 2D texture.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDimension.Texture2DArray">
            <summary>
            The resource is an array of 2D textures.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDimension.Texture2DMultisampled">
            <summary>
            The resource is a multisampling 2D texture.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDimension.Texture2DMultisampledArray">
            <summary>
            The resource is an array of multisampling 2D textures.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDimension.Texture3D">
            <summary>
            The resource is a 3D texture.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDimension.TextureCube">
            <summary>
            The resource is a cube texture.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDimension.TextureCubeArray">
            <summary>
            The resource is an array of cube textures.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewDimension.ExtendedBuffer">
            <summary>
            The resource is an extended buffer.
            </summary>
        </member>
        <member name="T:Beholder.Resources.ShaderResourceViewExtendedBufferFlags">
            <summary>
            Identifies how to bind a raw-buffer resource to the pipeline.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewExtendedBufferFlags.None">
            <summary>
            No flags specified.
            </summary>
        </member>
        <member name="F:Beholder.Resources.ShaderResourceViewExtendedBufferFlags.Raw">
            <summary>
            Bind a raw buffer to the input-assembler stage.
            </summary>
        </member>
        <member name="T:Beholder.Resources.Texture2DDescription">
            <summary>
            Describes a 2D texture.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture2DDescription.Width">
            <summary>
            Texture width (in texels).
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture2DDescription.Height">
            <summary>
            Texture height (in texels).
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture2DDescription.MipLevels">
            <summary>
            The maximum number of mipmap levels in the texture.
            Use 1 for a multisampled texture.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture2DDescription.ArraySize">
            <summary>
            Number of textures in the array.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture2DDescription.FormatID">
            <summary>
            Texture format ID.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture2DDescription.Sampling">
            <summary>
            Structure that specifies multisampling parameters for the texture.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture2DDescription.Usage">
            <summary>
            Identify how the resource is expected to be read from and written to. 
            Frequency of update is a key factor.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture2DDescription.BindFlags">
            <summary>
            Identify how the buffer will be bound to the pipeline. 
            Flags can be combined with a logical OR.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture2DDescription.MiscFlags">
            <summary>
            Flags that identify other, less common resource options. 
            These flags can be combined with a logical OR.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture2DDescription.ExtraFlags">
            <summary>
            Extra flags that specify use-cases of the resource for less flexible APIs (i.e. D3D9).
            Flags can be combined with a logical OR.
            </summary>
        </member>
        <member name="T:Beholder.Resources.UnorderedAccessViewBufferFlags">
            <summary>
            Unordered-access-view buffer options.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewBufferFlags.None">
            <summary>
            No flags specified.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewBufferFlags.Raw">
            <summary>
            Resource contains raw, unstructured data. Requires the UAV format to be R32_TYPELESS.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewBufferFlags.Append">
            <summary>
            Allow data to be appended to the end of the buffer. 
            This flag must also be used for any view that will be used as a AppendStructuredBuffer or a ConsumeStructuredBuffer. 
            Requires the UAV format to be R32_TYPELESS.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewBufferFlags.Counter">
            <summary>
            Adds a counter to the unordered-access-view buffer. 
            This flag can only be used on a UAV that is a RWStructuredBuffer and it enables the functionality needed for the IncrementCounter and DecrementCounter methods in HLSL. 
            Requires the UAV format to be R32_TYPELESS.
            </summary>
        </member>
        <member name="T:Beholder.Resources.UnorderedAccessViewDescription">
            <summary>
            Describes an unordered access view.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewDescription.Dimension">
            <summary>
            Type of the resource to be viewed.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewDescription.FormatID">
            <summary>
            Data format ID.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewDescription.FirstElement">
            <summary>
            Index of the first buffer element to be used by the view.
            Only used for buffers.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewDescription.ElementCount">
            <summary>
            Number of buffer elements in the resource.
            For structured buffers, this is the number of structures in the buffer.
            Only used for buffers.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewDescription.BufferFlags">
            <summary>
            View options for the buffer resource.
            Only used for buffers (obviously).
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewDescription.MipSlice">
            <summary>
            Index of the mip level to be used by the view.
            Not used for buffers.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewDescription.FirstArraySlice">
            <summary>
            Index of the first texture to be used by the view in an array of textures.
            Only used for texture arrays.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewDescription.ArraySize">
            <summary>
            Number of textures in the array to be used by the view.
            Only used for texture arrays.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewDescription.FirstDepthSlice">
            <summary>
            First depth level to be used by the view.
            Only used by 3D textures.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewDescription.DepthSliceCount">
            <summary>
            Number of depth levels to be used by the view, starting from FirstDepthSlice.
            Only used by 3D textures.
            </summary>
        </member>
        <member name="T:Beholder.Resources.UnorderedAccessViewDimension">
            <summary>
            Unordered-access view options.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewDimension.Unknown">
            <summary>
            The view type is unknown.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewDimension.Buffer">
            <summary>
            View the resource as a buffer.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewDimension.Texture1D">
            <summary>
            View the resource as a 1D texture.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewDimension.Texture1DArray">
            <summary>
            View the resource as a 1D texture array.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewDimension.Texture2D">
            <summary>
            View the resource as a 2D texture.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewDimension.Texture2DArray">
            <summary>
            View the resource as a 2D texture array.
            </summary>
        </member>
        <member name="F:Beholder.Resources.UnorderedAccessViewDimension.Texture3D">
            <summary>
            View the resource as a 3D texture array.
            </summary>
        </member>
        <member name="T:Beholder.Shaders.IPixelShader">
            <summary>
            An executable program (a pixel shader) that controls the pixel-shader stage.
            </summary>
        </member>
        <member name="T:Beholder.Shaders.IVertexShader">
            <summary>
            An executable program (a vertex shader) that controls the vertex-shader stage.
            </summary>
        </member>
        <member name="T:Beholder.Core.RenderTargetBlendDescription">
            <summary>
            Describes the blend state for a render target.
            </summary>
        </member>
        <member name="F:Beholder.Core.RenderTargetBlendDescription.BlendEnable">
            <summary>
            Enable (or disable) blending.
            </summary>
        </member>
        <member name="F:Beholder.Core.RenderTargetBlendDescription.SourceBlend">
            <summary>
            Specifies the first RGB data source and includes an optional pre-blend operation.
            </summary>
        </member>
        <member name="F:Beholder.Core.RenderTargetBlendDescription.DestinationBlend">
            <summary>
            Specifies the second RGB data source and includes an optional pre-blend operation.
            </summary>
        </member>
        <member name="F:Beholder.Core.RenderTargetBlendDescription.BlendOperation">
            <summary>
            Defines how to combine the RGB data sources.
            </summary>
        </member>
        <member name="F:Beholder.Core.RenderTargetBlendDescription.SourceBlendAlpha">
            <summary>
            Specifies the first alpha data source and includes an optional pre-blend operation. Blend options that end in '...Color' are not allowed.
            </summary>
        </member>
        <member name="F:Beholder.Core.RenderTargetBlendDescription.DestinationBlendAlpha">
            <summary>
            Specifies the second alpha data source and includes an optional pre-blend operation. Blend options that end in '...Color' are not allowed.
            </summary>
        </member>
        <member name="F:Beholder.Core.RenderTargetBlendDescription.BlendOperationAlpha">
            <summary>
            Defines how to combine the alpha data sources.
            </summary>
        </member>
        <member name="F:Beholder.Core.RenderTargetBlendDescription.RenderTargetWriteMask">
            <summary>
            A write mask.
            </summary>
        </member>
        <member name="M:Beholder.Core.RenderTargetBlendDescription.#ctor(System.Boolean,Beholder.Core.Blend,Beholder.Core.Blend,Beholder.Core.BlendOperation,Beholder.Core.Blend,Beholder.Core.Blend,Beholder.Core.BlendOperation,Beholder.Core.ColorMask)">
            <summary>
            Creates a new <see cref="T:Beholder.Core.RenderTargetBlendDescription"/> structure.
            </summary>
            <param name="blendEnable">Enable (or disable) blending.</param>
            <param name="sourceBlend">Specifies the first RGB data source and includes an optional pre-blend operation.</param>
            <param name="destinationBlend">Specifies the second RGB data source and includes an optional pre-blend operation.</param>
            <param name="blendOperation">Defines how to combine the RGB data sources.</param>
            <param name="sourceBlendAlpha">Specifies the first alpha data source and includes an optional pre-blend operation. Blend options that end in '...Color' are not allowed.</param>
            <param name="destinationBlendAlpha">Specifies the second alpha data source and includes an optional pre-blend operation. Blend options that end in '...Color' are not allowed.</param>
            <param name="blendOperationAlpha">Defines how to combine the alpha data sources.</param>
            <param name="renderTargetrWriteMask">A write mask.</param>
        </member>
        <member name="T:Beholder.IDevice">
            <summary>
            Represents an entity that contains swap-chains, graphical objects, and rendering contexts.
            </summary>
        </member>
        <member name="T:Beholder.Platform.DeviceInitializationFlags">
            <summary>
            Identifies the threading and debug capabilities of the device being created.
            </summary>
        </member>
        <member name="F:Beholder.Platform.DeviceInitializationFlags.None">
            <summary>
            Specifies no flags. Device with no debug capabilities should be created.
            </summary>
        </member>
        <member name="F:Beholder.Platform.DeviceInitializationFlags.Debug">
            <summary>
            Creates a device that enables internal debug capabilities.
            </summary>
        </member>
        <member name="T:Beholder.Platform.IAdditionalSwapChain">
            <summary>
            Represents a swap chain that was created by calling the <see cref="M:Beholder.IDevice.CreateAdditionalSwapChain(Beholder.Platform.IWindowHandle,Beholder.Platform.SwapChainDescription)"/> method.
            This swap chain is not capable of switching to fullscreen mode.
            </summary>
        </member>
        <member name="T:Beholder.Platform.ISwapChain">
            <summary>
            Implements one or more surfaces for storing rendered data before presenting it to an output.
            </summary>
        </member>
        <member name="M:Beholder.Platform.ISwapChain.GetDescription(Beholder.Platform.SwapChainDescription@)">
            <summary>
            Gets the description of the swap chain.
            </summary>
            <param name="description">Variable to fill with the description data.</param>
        </member>
        <member name="M:Beholder.Platform.ISwapChain.GetCurrentColorBuffer">
            <summary>
            Gets a <see cref="T:Beholder.Resources.IRenderTargetView"/> of the color buffer to which rendering should be done this frame.
            </summary>
            <returns><see cref="T:Beholder.Resources.IRenderTargetView"/> of the color buffer.</returns>
        </member>
        <member name="M:Beholder.Platform.ISwapChain.GetCurrentDepthStencilBuffer">
            <summary>
            Gets a <see cref="T:Beholder.Resources.IDepthStencilView"/> of the depth-stencil buffer which should be used this frame.
            </summary>
            <returns><see cref="T:Beholder.Resources.IDepthStencilView"/> of the depth-stencil buffer.</returns>
        </member>
        <member name="M:Beholder.Platform.ISwapChain.BeginScene">
            <summary>
            Checks whether the rendering is currently possible into the swap chain and prepares it to accepting drawing commands.
            </summary>
            <returns>Boolean value indicating whether it is currenlt possible to draw into the swap chain this frame.</returns>
        </member>
        <member name="M:Beholder.Platform.ISwapChain.EndScene">
            <summary>
            Prepares the swap chain to present the buffer.
            This method should always be called after the succeded Begin call and before the Present call.
            </summary>
        </member>
        <member name="M:Beholder.Platform.ISwapChain.Present">
            <summary>
            Presents the back buffer data to the screen.
            </summary>
        </member>
        <member name="M:Beholder.Platform.ISwapChain.Reset(Beholder.Platform.SwapChainDescription@)">
            <summary>
            Resets the swap chain and switches it to windowed mode.
            </summary>
            <param name="description">New settings for the swap chains to have after the reset.</param>
        </member>
        <member name="P:Beholder.Platform.ISwapChain.Window">
            <summary>
            Gets a window that holds the swap chain.
            </summary>
        </member>
        <member name="P:Beholder.Platform.ISwapChain.Width">
            <summary>
            Gets the width of the swap chain.
            </summary>
        </member>
        <member name="P:Beholder.Platform.ISwapChain.Height">
            <summary>
            Gets the height of the swap chain.
            </summary>
        </member>
        <member name="P:Beholder.Platform.ISwapChain.ColorBufferCount">
            <summary>
            Number of the swap chain's color buffers.
            </summary>
        </member>
        <member name="P:Beholder.Platform.ISwapChain.ColorBufferFormatID">
            <summary>
            Format ID of the swap chain's color buffer.
            </summary>
        </member>
        <member name="P:Beholder.Platform.ISwapChain.EnableAutoDepthStencil">
            <summary>
            Specifies whether the swap chain should use its own (auto) depth-stencil buffer.
            </summary>
        </member>
        <member name="P:Beholder.Platform.ISwapChain.DepthStencilFormatID">
            <summary>
            Format ID of the swap chain's auto depth-stencil buffer. If <see cref="P:Beholder.Platform.ISwapChain.EnableAutoDepthStencil"/> is set to false, this field is ignored.
            </summary>
        </member>
        <member name="P:Beholder.Platform.ISwapChain.Sampling">
            <summary>
            A <see cref="P:Beholder.Platform.ISwapChain.Sampling"/> structure describing multi-sampling parameters.
            </summary>
        </member>
        <member name="P:Beholder.Platform.ISwapChain.VerticalSync">
            <summary>
            Specifies whether the swap chain should wait for a monitor vertical refresh to present a new frame.
            </summary>
            <remarks>Using this option will remove the "tearing" effect and reduce the chance of the GPU overheat, 
            but may reduce FPS if its non-synchronized value is below monitor's refresh rate.
            </remarks>
        </member>
        <member name="T:Beholder.Platform.IPrimarySwapChain">
            <summary>
            Represents a primary swap chain of the device.
            This swap chain is capable of switching to the fullscreen mode.
            </summary>
        </member>
        <member name="M:Beholder.Platform.IPrimarySwapChain.ResetToFullscreen(Beholder.Platform.DisplayMode@,Beholder.Platform.SwapChainDescription@)">
            <summary>
            Resets a swap chain and makes it switch to the fullscreen mode.
            </summary>
            <param name="displayMode">Display mode to use while in the fullscreen mode.</param>
            <param name="description">
            New settings for the swap chains to have after the reset.
            ColorBufferFormatID must be supported as a fullscreen swap chain color buffer format by the adapter.
            </param>
        </member>
        <member name="P:Beholder.Platform.IPrimarySwapChain.FullscreenState">
            <summary>
            Indicates whether the swap chain is in the fullscreen mode at the moment.
            </summary>
        </member>
        <member name="T:Beholder.Platform.PreventEventArgs">
            <summary>
            Event arguments that can be used to prevent something.
            </summary>
        </member>
        <member name="P:Beholder.Platform.PreventEventArgs.Prevent">
            <summary>
            Gets or sets the flag that the event must be prevented.
            </summary>
        </member>
        <member name="T:Beholder.Shaders.IDomainShader">
            <summary>
            An executable program (a domain shader) that controls the domain-shader stage.
            </summary>
        </member>
        <member name="T:Beholder.Shaders.IGeometryShader">
            <summary>
            An executable program (a geometry shader) that controls the geometry-shader stage.
            </summary>
        </member>
        <member name="T:Beholder.Shaders.IHullShader">
            <summary>
            An executable program (a hull shader) that controls the hull-shader stage.
            </summary>
        </member>
        <member name="P:Beholder.Utility.Collections.OneWayLinkedList`1.Dummy">
            <summary>
            Virtual node that always stands before the first one.
            </summary>
        </member>
        <member name="T:Beholder.Platform.FormatElementType">
            <summary>
            Bitwise representation of a part of a format.
            </summary>
        </member>
        <member name="T:Beholder.Resources.Texture1DDescription">
            <summary>
            Describes a 1D texture.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture1DDescription.Width">
            <summary>
            Texture width (in texels).
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture1DDescription.MipLevels">
            <summary>
            The maximum number of mipmap levels in the texture.
            Use 1 for a multisampled texture.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture1DDescription.ArraySize">
            <summary>
            Number of textures in the array.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture1DDescription.FormatID">
            <summary>
            Texture format ID.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture1DDescription.Usage">
            <summary>
            Identify how the resource is expected to be read from and written to. 
            Frequency of update is a key factor.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture1DDescription.BindFlags">
            <summary>
            Identify how the buffer will be bound to the pipeline. 
            Flags can be combined with a logical OR.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture1DDescription.MiscFlags">
            <summary>
            Flags that identify other, less common resource options. 
            These flags can be combined with a logical OR.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture1DDescription.ExtraFlags">
            <summary>
            Extra flags that specify use-cases of the resource for less flexible APIs (i.e. D3D9).
            Flags can be combined with a logical OR.
            </summary>
        </member>
        <member name="T:Beholder.Resources.Texture3DDescription">
            <summary>
            Describes a 3D texture.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture3DDescription.Width">
            <summary>
            Texture width (in texels).
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture3DDescription.Height">
            <summary>
            Texture height (in texels).
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture3DDescription.Depth">
            <summary>
            Texture depth (in texels).
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture3DDescription.MipLevels">
            <summary>
            The maximum number of mipmap levels in the texture.
            Use 1 for a multisampled texture.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture3DDescription.FormatID">
            <summary>
            Texture format ID.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture3DDescription.Usage">
            <summary>
            Identify how the resource is expected to be read from and written to. 
            Frequency of update is a key factor.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture3DDescription.BindFlags">
            <summary>
            Identify how the buffer will be bound to the pipeline. 
            Flags can be combined with a logical OR.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture3DDescription.MiscFlags">
            <summary>
            Flags that identify other, less common resource options. 
            These flags can be combined with a logical OR.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Texture3DDescription.ExtraFlags">
            <summary>
            Extra flags that specify use-cases of the resource for less flexible APIs (i.e. D3D9).
            Flags can be combined with a logical OR.
            </summary>
        </member>
        <member name="T:Beholder.Platform.RealTime">
            <summary>
            The most straight implementation of the <see cref="T:Beholder.Platform.IRealTime"/> interface.
            </summary>
        </member>
        <member name="T:Beholder.Platform.IRealTime">
            <summary>
            Provides the information about the total time, time elapsed from the last frame and the number of frames per second.
            </summary>
        </member>
        <member name="P:Beholder.Platform.IRealTime.TotalRealTime">
            <summary>
            Total real time elapsed from the start of the game loop.
            </summary>
        </member>
        <member name="P:Beholder.Platform.IRealTime.ElapsedRealTime">
            <summary>
            Real time elapsed from the last frame.
            </summary>
        </member>
        <member name="P:Beholder.Platform.IRealTime.FramesPerSecond">
            <summary>
            Current number of frames per second.
            </summary>
        </member>
        <member name="P:Beholder.Platform.RealTime.TotalRealTime">
            <summary>
            Total real time elapsed from the start of the game loop.
            </summary>
        </member>
        <member name="P:Beholder.Platform.RealTime.ElapsedRealTime">
            <summary>
            Real time elapsed from the last frame.
            </summary>
        </member>
        <member name="P:Beholder.Platform.RealTime.FramesPerSecond">
            <summary>
            Current number of frames per second.
            </summary>
        </member>
        <member name="T:Beholder.Platform.FormatSupport">
            <summary>
            Which resources are supported for a given format and given adapter.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.Buffer">
            <summary>
            Buffer resources supported.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.SoBuffer">
            <summary>
            Streaming output buffers supported.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.Texture1D">
            <summary>
            1D texture resources supported.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.Texture2D">
            <summary>
            2D texture resources supported.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.Texture3D">
            <summary>
            3D texture resources supported.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.TextureCube">
            <summary>
            Cube texture resources supported.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.ShaderLoad">
            <summary>
            The intrinsic HLSL function load is supported.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.ShaderSample">
            <summary>
            The intrinsic HLSL functions sample supported.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.ShaderSampleComparison">
            <summary>
            The intrinsic HLSL functions samplecmp and samplecmplevelzero are supported.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.Mip">
            <summary>
            Mipmaps are supported.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.MipAutogen">
            <summary>
            Automatic generation of mipmaps is supported.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.RenderTarget">
            <summary>
            Rendertargets are supported.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.Blendable">
            <summary>
            Blend operations supported.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.DepthStencil">
            <summary>
            Depth stencils supported.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.MultisampleResolve">
            <summary>
            Multisampling resolution supported. (DeviceContext::UpdateSubresource())
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.MultisampleRendertarget">
            <summary>
            Format can be used as a multisampled rendertarget.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.MultisampleLoad">
            <summary>
            Format can be used as a multisampled texture and read into a shader with the HLSL load function.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.ShaderGather">
            <summary>
            Format can be used with the HLSL gather function. This value is available in DirectX 10.1 or higher.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.TypedUnorderedAccessView">
            <summary>
            Format can be used for an unordered access view.
            </summary>
        </member>
        <member name="F:Beholder.Platform.FormatSupport.ShaderGatherComparison">
            <summary>
            Format can be used with the HLSL gather with comparison function.
            </summary>
        </member>
        <member name="T:Beholder.Core.Blend">
            <summary>
            Blend options. A blend option identifies the data source and an optional pre-blend operation.
            </summary>
        </member>
        <member name="F:Beholder.Core.Blend.Zero">
            <summary>
            The data source is the color black (0, 0, 0, 0). 
            No pre-blend operation.
            </summary>
        </member>
        <member name="F:Beholder.Core.Blend.One">
            <summary>
            The data source is the color white (1, 1, 1, 1). 
            No pre-blend operation.
            </summary>
        </member>
        <member name="F:Beholder.Core.Blend.SourceColor">
            <summary>
            The data source is color data (RGB) from a pixel shader. 
            No pre-blend operation.
            </summary>
        </member>
        <member name="F:Beholder.Core.Blend.InverseSourceColor">
            <summary>
            The data source is color data (RGB) from a pixel shader. 
            The pre-blend operation inverts the data, generating 1 - RGB.
            </summary>
        </member>
        <member name="F:Beholder.Core.Blend.SourceAlpha">
            <summary>
            The data source is alpha data (A) from a pixel shader. 
            No pre-blend operation.
            </summary>
        </member>
        <member name="F:Beholder.Core.Blend.InverseSourceAlpha">
            <summary>
            The data source is alpha data (A) from a pixel shader. 
            The pre-blend operation inverts the data, generating 1 - A.
            </summary>
        </member>
        <member name="F:Beholder.Core.Blend.DestinationAlpha">
            <summary>
            The data source is alpha data from a rendertarget. 
            No pre-blend operation.
            </summary>
        </member>
        <member name="F:Beholder.Core.Blend.InverseDestinationAlpha">
            <summary>
            The data source is alpha data from a rendertarget. 
            The pre-blend operation inverts the data, generating 1 - A.
            </summary>
        </member>
        <member name="F:Beholder.Core.Blend.DestinationColor">
            <summary>
            The data source is color data from a rendertarget. 
            No pre-blend operation.
            </summary>
        </member>
        <member name="F:Beholder.Core.Blend.InverseDestinationColor">
            <summary>
            The data source is color data from a rendertarget. 
            The pre-blend operation inverts the data, generating 1 - RGB.
            </summary>
        </member>
        <member name="F:Beholder.Core.Blend.SourceAlphaSaturation">
            <summary>
            The data source is alpha data from a pixel shader. 
            The pre-blend operation clamps the data to 1 or less.
            </summary>
        </member>
        <member name="F:Beholder.Core.Blend.BlendFactor">
            <summary>
            The data source is the blend factor set with IDeviceContext.OutputMerger.BlendFactor method. 
            No pre-blend operation.
            </summary>
        </member>
        <member name="F:Beholder.Core.Blend.InverseBlendFactor">
            <summary>
            The data source is the blend factor set with IDeviceContext.OutputMerger.BlendFactor method. 
            The pre-blend operation inverts the blend factor, generating 1 - BlendFactor.
            </summary>
        </member>
        <member name="F:Beholder.Core.Blend.SourceOneColor">
            <summary>
            The data sources are both color data output by a pixel shader. 
            There is no pre-blend operation. 
            This options supports dual-source color blending.
            </summary>
        </member>
        <member name="F:Beholder.Core.Blend.InverseSourceOneColor">
            <summary>
            The data sources are both color data output by a pixel shader. 
            The pre-blend operation inverts the data, generating 1 - RGB. 
            This options supports dual-source color blending.
            </summary>
        </member>
        <member name="F:Beholder.Core.Blend.SourceOneAlpha">
            <summary>
            The data sources are alpha data output by a pixel shader. 
            There is no pre-blend operation. 
            This options supports dual-source color blending.
            </summary>
        </member>
        <member name="F:Beholder.Core.Blend.InverseSourceOneAlpha">
            <summary>
            The data sources are alpha data output by a pixel shader. 
            The pre-blend operation inverts the data, generating 1 - A. 
            This options supports dual-source color blending.
            </summary>
        </member>
        <member name="T:Beholder.Core.BlendDescription">
            <summary>
            Describes a blend state.
            </summary>
        </member>
        <member name="F:Beholder.Core.BlendDescription.RenderTargetBlend0">
            <summary>
            Blend description for the render target slot 0 or for all the render target slots,
            if <see cref="F:Beholder.Core.BlendDescription.IndependentBlendEnable"/> property is set to False.
            </summary>
        </member>
        <member name="F:Beholder.Core.BlendDescription.RenderTargetBlend1">
            <summary>
            Blend description for the render target slot 1.
            If <see cref="F:Beholder.Core.BlendDescription.IndependentBlendEnable"/> property is set to False, this field is ignored.
            </summary>
        </member>
        <member name="F:Beholder.Core.BlendDescription.RenderTargetBlend2">
            <summary>
            Blend description for the render target slot 2.
            If <see cref="F:Beholder.Core.BlendDescription.IndependentBlendEnable"/> property is set to False, this field is ignored.
            </summary>
        </member>
        <member name="F:Beholder.Core.BlendDescription.RenderTargetBlend3">
            <summary>
            Blend description for the render target slot 3.
            If <see cref="F:Beholder.Core.BlendDescription.IndependentBlendEnable"/> property is set to False, this field is ignored.
            </summary>
        </member>
        <member name="F:Beholder.Core.BlendDescription.RenderTargetBlend4">
            <summary>
            Blend description for the render target slot 4.
            If <see cref="F:Beholder.Core.BlendDescription.IndependentBlendEnable"/> property is set to False, this field is ignored.
            </summary>
        </member>
        <member name="F:Beholder.Core.BlendDescription.RenderTargetBlend5">
            <summary>
            Blend description for the render target slot 5.
            If <see cref="F:Beholder.Core.BlendDescription.IndependentBlendEnable"/> property is set to False, this field is ignored.
            </summary>
        </member>
        <member name="F:Beholder.Core.BlendDescription.RenderTargetBlend6">
            <summary>
            Blend description for the render target slot 6.
            If <see cref="F:Beholder.Core.BlendDescription.IndependentBlendEnable"/> property is set to False, this field is ignored.
            </summary>
        </member>
        <member name="F:Beholder.Core.BlendDescription.RenderTargetBlend7">
            <summary>
            Blend description for the render target slot 7.
            If <see cref="F:Beholder.Core.BlendDescription.IndependentBlendEnable"/> property is set to False, this field is ignored.
            </summary>
        </member>
        <member name="F:Beholder.Core.BlendDescription.AlphaToCoverageEnable">
            <summary>
            Determines whether or not to use alpha-to-coverage as a multisampling technique when setting a pixel to a rendertarget.
            </summary>
        </member>
        <member name="F:Beholder.Core.BlendDescription.IndependentBlendEnable">
            <summary>
            Set to True to enable independent blending in simultaneous render targets. 
            If set to False, only the RenderTargetBlend0 members are used. RenderTargetBlend[1..7] are ignored.
            </summary>
        </member>
        <member name="M:Beholder.Core.BlendDescription.GetRenderTargetBlend(System.Int32)">
            <summary>
            Retrieves a blend description for a specified render target slot.
            </summary>
            <param name="renderTargetSlot">Render target slot.</param>
        </member>
        <member name="M:Beholder.Core.BlendDescription.SetRenderTargetBlend(Beholder.Core.BlendDescription@,System.Int32,Beholder.Core.RenderTargetBlendDescription@)">
            <summary>
            Sets a blend description for a specified render target slot.
            </summary>
            <param name="desc">Description to set the render target blend for.</param>
            <param name="renderTargetSlot">Render target slot.</param>
            <param name="renderTargetBlend">Blend description for the render target.</param>
        </member>
        <member name="M:Beholder.Core.BlendDescription.SetRenderTargetBlend(System.Int32,Beholder.Core.RenderTargetBlendDescription)">
            <summary>
            Sets a blend description for a specified render target slot.
            </summary>
            <param name="renderTargetSlot">Render target slot.</param>
            <param name="renderTargetBlend">Blend description for the render target.</param>
        </member>
        <member name="M:Beholder.Core.BlendDescription.#ctor(System.Boolean,Beholder.Core.RenderTargetBlendDescription)">
            <summary>
            Creates a new <see cref="T:Beholder.Core.BlendDescription"/> structure with independent render target blend disabled.
            </summary>
            <param name="alphaToCoverageEnable">Determines whether or not to use alpha-to-coverage as a multisampling technique when setting a pixel to a rendertarget.</param>
            <param name="allRenderTargetBlend">Blend description for all the render target slots.</param>
        </member>
        <member name="M:Beholder.Core.BlendDescription.#ctor(System.Boolean,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription)">
            <summary>
            Creates a new <see cref="T:Beholder.Core.BlendDescription"/> structure with independent render target blend enabled.
            </summary>
            <param name="alphaToCoverageEnable">Determines whether or not to use alpha-to-coverage as a multisampling technique when setting a pixel to a rendertarget.</param>
            <param name="renderTargetBlend0">Blend description for the render target slot 0.</param>
            <param name="renderTargetBlend1">Blend description for the render target slot 1.</param>
        </member>
        <member name="M:Beholder.Core.BlendDescription.#ctor(System.Boolean,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription)">
            <summary>
            Creates a new <see cref="T:Beholder.Core.BlendDescription"/> structure with independent render target blend enabled.
            </summary>
            <param name="alphaToCoverageEnable">Determines whether or not to use alpha-to-coverage as a multisampling technique when setting a pixel to a rendertarget.</param>
            <param name="renderTargetBlend0">Blend description for the render target slot 0.</param>
            <param name="renderTargetBlend1">Blend description for the render target slot 1.</param>
            <param name="renderTargetBlend2">Blend description for the render target slot 2.</param>
        </member>
        <member name="M:Beholder.Core.BlendDescription.#ctor(System.Boolean,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription)">
            <summary>
            Creates a new <see cref="T:Beholder.Core.BlendDescription"/> structure with independent render target blend enabled.
            </summary>
            <param name="alphaToCoverageEnable">Determines whether or not to use alpha-to-coverage as a multisampling technique when setting a pixel to a rendertarget.</param>
            <param name="renderTargetBlend0">Blend description for the render target slot 0.</param>
            <param name="renderTargetBlend1">Blend description for the render target slot 1.</param>
            <param name="renderTargetBlend2">Blend description for the render target slot 2.</param>
            <param name="renderTargetBlend3">Blend description for the render target slot 3.</param>
        </member>
        <member name="M:Beholder.Core.BlendDescription.#ctor(System.Boolean,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription)">
            <summary>
            Creates a new <see cref="T:Beholder.Core.BlendDescription"/> structure with independent render target blend enabled.
            </summary>
            <param name="alphaToCoverageEnable">Determines whether or not to use alpha-to-coverage as a multisampling technique when setting a pixel to a rendertarget.</param>
            <param name="renderTargetBlend0">Blend description for the render target slot 0.</param>
            <param name="renderTargetBlend1">Blend description for the render target slot 1.</param>
            <param name="renderTargetBlend2">Blend description for the render target slot 2.</param>
            <param name="renderTargetBlend3">Blend description for the render target slot 3.</param>
            <param name="renderTargetBlend4">Blend description for the render target slot 4.</param>
        </member>
        <member name="M:Beholder.Core.BlendDescription.#ctor(System.Boolean,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription)">
            <summary>
            Creates a new <see cref="T:Beholder.Core.BlendDescription"/> structure with independent render target blend enabled.
            </summary>
            <param name="alphaToCoverageEnable">Determines whether or not to use alpha-to-coverage as a multisampling technique when setting a pixel to a rendertarget.</param>
            <param name="renderTargetBlend0">Blend description for the render target slot 0.</param>
            <param name="renderTargetBlend1">Blend description for the render target slot 1.</param>
            <param name="renderTargetBlend2">Blend description for the render target slot 2.</param>
            <param name="renderTargetBlend3">Blend description for the render target slot 3.</param>
            <param name="renderTargetBlend4">Blend description for the render target slot 4.</param>
            <param name="renderTargetBlend5">Blend description for the render target slot 5.</param>
        </member>
        <member name="M:Beholder.Core.BlendDescription.#ctor(System.Boolean,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription)">
            <summary>
            Creates a new <see cref="T:Beholder.Core.BlendDescription"/> structure with independent render target blend enabled.
            </summary>
            <param name="alphaToCoverageEnable">Determines whether or not to use alpha-to-coverage as a multisampling technique when setting a pixel to a rendertarget.</param>
            <param name="renderTargetBlend0">Blend description for the render target slot 0.</param>
            <param name="renderTargetBlend1">Blend description for the render target slot 1.</param>
            <param name="renderTargetBlend2">Blend description for the render target slot 2.</param>
            <param name="renderTargetBlend3">Blend description for the render target slot 3.</param>
            <param name="renderTargetBlend4">Blend description for the render target slot 4.</param>
            <param name="renderTargetBlend5">Blend description for the render target slot 5.</param>
            <param name="renderTargetBlend6">Blend description for the render target slot 6.</param>
        </member>
        <member name="M:Beholder.Core.BlendDescription.#ctor(System.Boolean,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription,Beholder.Core.RenderTargetBlendDescription)">
            <summary>
            Creates a new <see cref="T:Beholder.Core.BlendDescription"/> structure with independent render target blend enabled.
            </summary>
            <param name="alphaToCoverageEnable">Determines whether or not to use alpha-to-coverage as a multisampling technique when setting a pixel to a rendertarget.</param>
            <param name="renderTargetBlend0">Blend description for the render target slot 0.</param>
            <param name="renderTargetBlend1">Blend description for the render target slot 1.</param>
            <param name="renderTargetBlend2">Blend description for the render target slot 2.</param>
            <param name="renderTargetBlend3">Blend description for the render target slot 3.</param>
            <param name="renderTargetBlend4">Blend description for the render target slot 4.</param>
            <param name="renderTargetBlend5">Blend description for the render target slot 5.</param>
            <param name="renderTargetBlend6">Blend description for the render target slot 6.</param>
            <param name="renderTargetBlend7">Blend description for the render target slot 7.</param>
        </member>
        <member name="M:Beholder.Core.BlendDescription.Equals(Beholder.Core.BlendDescription)">
            <summary>
            Returs a value indicating whether this BlendDescription is equal to another BlendDescription.
            </summary>
            <param name="other">A BlendDescription to compare to this instance.</param>
            <returns>True if two descriptions are equals and False otherwise.</returns>
        </member>
        <member name="M:Beholder.Core.BlendDescription.Equals(Beholder.Core.BlendDescription@,Beholder.Core.BlendDescription@)">
            <summary>
            Returns a value indicating whether the specified blend descriptions are equal.
            </summary>
            <param name="desc1">First description to compare.</param>
            <param name="desc2">Sencond description to compare.</param>
            <returns>True if two descriptions are equals and False otherwise.</returns>
        </member>
        <member name="P:Beholder.Core.BlendDescription.MaxRenderTargetBlendCount">
            <summary>
            Maximum number of independent render target blend options.
            </summary>
        </member>
        <member name="T:Beholder.Core.BlendOperation">
            <summary>
            RGB or alpha blending operation.
            </summary>
        </member>
        <member name="F:Beholder.Core.BlendOperation.Add">
            <summary>
            Add source 1 and source 2.
            </summary>
        </member>
        <member name="F:Beholder.Core.BlendOperation.Subtract">
            <summary>
            Subtract source 1 from source 2.
            </summary>
        </member>
        <member name="F:Beholder.Core.BlendOperation.ReverseSubtract">
            <summary>
            Subtract source 2 from source 1.
            </summary>
        </member>
        <member name="F:Beholder.Core.BlendOperation.Minimum">
            <summary>
            Find the minimum of source 1 and source 2.
            </summary>
        </member>
        <member name="F:Beholder.Core.BlendOperation.Maximum">
            <summary>
            Find the maximum of source 1 and source 2.
            </summary>
        </member>
        <member name="M:Beholder.Math.Color3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of a <see cref="T:Beholder.Math.Color3"/>
            </summary>
            <param name="red">Red component of a color (float in the range from 0.0f to 1.0f)</param>
            <param name="green">Green component of a color (float in the range from 0.0f to 1.0f)</param>
            <param name="blue">Blue component of a color (float in the range from 0.0f to 1.0f)</param>
        </member>
        <member name="M:Beholder.Math.Color3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of a <see cref="T:Beholder.Math.Color3"/> class.
            </summary>
            <param name="red">Red component of a color (integer in the range from 0 to 255)</param>
            <param name="green">Green component of a color (integer in the range from 0 to 255)</param>
            <param name="blue">Blue component of a color (integer in the range from 0 to 255)</param>
        </member>
        <member name="M:Beholder.Math.Color4.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Beholder.Math.Color4"/> structure with alpha = 1.0f.
            </summary>
            <param name="red">Red component of a color (float in the range from 0.0f to 1.0f).</param>
            <param name="green">Green component of a color (float in the range from 0.0f to 1.0f).</param>
            <param name="blue">Blue component of a color (float in the range from 0.0f to 1.0f).</param>
        </member>
        <member name="M:Beholder.Math.Color4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of a <see cref="T:Beholder.Math.Color4"/>.
            </summary>
            <param name="red">Red component of a color (float in the range from 0.0f to 1.0f).</param>
            <param name="green">Green component of a color (float in the range from 0.0f to 1.0f).</param>
            <param name="blue">Blue component of a color (float in the range from 0.0f to 1.0f).</param>
            <param name="alpha">Alpha component of a color (float in the range from 0.0f to 1.0f).</param>
        </member>
        <member name="M:Beholder.Math.Color4.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of a <see cref="T:Beholder.Math.Color4"/> with alpha = 255 (1.0f).
            </summary>
            <param name="red">Red component of a color (integer in the range from 0 to 255).</param>
            <param name="green">Green component of a color (integer in the range from 0 to 255).</param>
            <param name="blue">Blue component of a color (integer in the range from 0 to 255).</param>
        </member>
        <member name="M:Beholder.Math.Color4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of a <see cref="T:Beholder.Math.Color4"/>.
            </summary>
            <param name="red">Red component of a color (integer in the range from 0 to 255).</param>
            <param name="green">Green component of a color (integer in the range from 0 to 255).</param>
            <param name="blue">Blue component of a color (integer in the range from 0 to 255).</param>
            <param name="alpha">Alpha component of a color (integer in the range from 0 to 255).</param>
        </member>
        <member name="T:Beholder.Core.ColorMask">
            <summary>
            Specifies a set of color components of a pixel.
            </summary>
        </member>
        <member name="F:Beholder.Core.ColorMask.None">
            <summary>
            No components are specified.
            </summary>
        </member>
        <member name="F:Beholder.Core.ColorMask.Red">
            <summary>
            Red component.
            </summary>
        </member>
        <member name="F:Beholder.Core.ColorMask.Green">
            <summary>
            Green component.
            </summary>
        </member>
        <member name="F:Beholder.Core.ColorMask.Blue">
            <summary>
            Blue component.
            </summary>
        </member>
        <member name="F:Beholder.Core.ColorMask.Alpha">
            <summary>
            Alpha component.
            </summary>
        </member>
        <member name="F:Beholder.Core.ColorMask.All">
            <summary>
            All the components are specified.
            </summary>
        </member>
        <member name="T:Beholder.Platform.IAdapter">
            <summary>
            Represents a display sub-system (including one or more GPUs, DACs and video memory) that will be used by the <see cref="T:Beholder.IDevice"/>.
            </summary>
        </member>
        <member name="M:Beholder.Platform.IAdapter.GetDescription(Beholder.Platform.AdapterDescription@)">
            <summary>
            Gets the description of the adapter.
            </summary>
            <param name="adapterDesc">Variable to fill with the description data.</param>
        </member>
        <member name="M:Beholder.Platform.IAdapter.GetSupportedWindowedDisplayFormats">
            <summary>
            Formats that can be used as a swap chain format in a windowed mode.
            </summary>
        </member>
        <member name="M:Beholder.Platform.IAdapter.GetSupportedFormats(Beholder.Platform.FormatSupport)">
            <summary>
            Texel formats that can be used for textures of a specified usage.
            </summary>
            <param name="requiredSupport">Flags specifying how the texture of the desired format will be used.</param>
        </member>
        <member name="M:Beholder.Platform.IAdapter.CheckViewFormatCompatability(System.Int32,System.Int32)">
            <summary>
            Checks whether the given texture format and view format are compatible.
            </summary>
            <param name="textureFormatID">Format of the texture</param>
            <param name="viewFormatID">Format of the view</param>
        </member>
        <member name="M:Beholder.Platform.IAdapter.GetSupportedVertexElementFormats">
            <summary>
            Supported vertex formats.
            </summary>
        </member>
        <member name="M:Beholder.Platform.IAdapter.GetMultisampleQualityLevelsCount(System.Int32,System.Int32)">
            <summary>
            Gets the number of multisampling quality levels available for a given sample count of a texture with a specified format.
            </summary>
            <param name="formatID">Format ID of a surface being sampled.</param>
            <param name="sampleCount">Number of samples.</param>
        </member>
        <member name="P:Beholder.Platform.IAdapter.Index">
            <summary>
            Index of this adapter in the <see cref="P:Beholder.IEye.Adapters"/> list.
            </summary>
        </member>
        <member name="P:Beholder.Platform.IAdapter.Outputs">
            <summary>
            Outputs (monitors) that are bound to this adapter.
            </summary>
        </member>
        <member name="T:Beholder.IEye">
            <summary>
            Main interface of the Beholder.
            It provides the means to enumerate graphical adapters,
            create a <see cref="T:Beholder.IDevice"/> and run a game loop.
            </summary>
        </member>
        <member name="M:Beholder.IEye.PrepareExistingWindow(System.Object)">
            <summary>
            Prepares the existing platform-specific window to hold a swap chain.
            </summary>
            <param name="platformWindow">Platform-specific window.</param>
            <returns>Eye-specific handle of the window.</returns>
        </member>
        <member name="M:Beholder.IEye.CreateNewWindow(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Creates a new window that is capable of holding a swap chain.
            </summary>
            <param name="clientWidth">Width of the client (drawable into) area of the window.</param>
            <param name="clientHeight">Height of the client (drawable into) area of the window. </param>
            <param name="title">Window title.</param>
            <param name="isResizable">Specifies whether window should be isResizable by the user or not.</param>
            <returns>Eye-specific handle of the window.</returns>
        </member>
        <member name="M:Beholder.IEye.Initialize(Beholder.Platform.IAdapter,Beholder.Platform.IWindowHandle,Beholder.Platform.SwapChainDescription,Beholder.Platform.DeviceInitializationFlags,Beholder.Platform.IFileSystem)">
            <summary>
            Initializes the eye.
            </summary>
            <param name="adapter">Adapter to be used by the device. Can not be null.</param>
            <param name="windowHandle">Handle of the window to hold the primary swap chain.</param>
            <param name="primarySwapChainDescription">Description of the primary swap chain.</param>
            <param name="initializationFlags">Flags specifying threading and debug mode of the device.</param>
            <param name="fileSystem">Unusual file system for loader to use. Specify null to use OS file system.</param>
        </member>
        <member name="M:Beholder.IEye.RunLoop(Beholder.Platform.IWindow)">
            <summary>
            Starts the game loop.
            </summary>
            <param name="mainWindow"><see cref="T:Beholder.Platform.IWindow"/> that will terminate a loop if closed.</param>
            <remarks>
            This method will only return when either <see cref="M:Beholder.IEye.TerminateLoop"/> method is called or the main window is closed.
            </remarks>
        </member>
        <member name="M:Beholder.IEye.TerminateLoop">
            <summary>
            Causes the game loop to terminate.
            </summary>
        </member>
        <member name="P:Beholder.IEye.Adapters">
            <summary>
            Gets a list of all the graphical adapters available. 
            The adapter with the zero index is the most prefered adpater to be used.
            </summary>
        </member>
        <member name="P:Beholder.IEye.IsInitialized">
            <summary>
            Indicates whether the eye has already been initialized.
            </summary>
        </member>
        <member name="P:Beholder.IEye.Device">
            <summary>
            <see cref="T:Beholder.IDevice"/> of this <see cref="T:Beholder.IEye"/>.
            </summary>
            <remarks>
            Device can only be obtained after it is initialized with the <see cref="M:Beholder.IEye.Initialize(Beholder.Platform.IAdapter,Beholder.Platform.IWindowHandle,Beholder.Platform.SwapChainDescription,Beholder.Platform.DeviceInitializationFlags,Beholder.Platform.IFileSystem)"/> method.
            </remarks>
        </member>
        <member name="E:Beholder.IEye.NewFrame">
            <summary>
            Raised with the start of an every frame.
            </summary>
        </member>
        <member name="E:Beholder.IEye.LoopTerminating">
            <summary>
            Raised when the game loop is about to terminate.
            </summary>
            <remarks><see cref="T:Beholder.Platform.PreventEventArgs"/> object can be used to prevent the game loop termination.</remarks>
        </member>
        <member name="M:Beholder.Input.IKeyboardHandler.MaskKeys(Beholder.Input.Keys[])">
            <summary>
            Masks a set of keys for the duration of one frame. Masked keys are not marked as down, pressed or released.
            </summary>
            <param name="keys">Keys to mask. This field can not be null.</param>
        </member>
        <member name="T:Beholder.Platform.IOutput">
            <summary>
            Represents an adapter output (such as a monitor).
            </summary>
        </member>
        <member name="M:Beholder.Platform.IOutput.GetDescription(Beholder.Platform.OutputDescription@)">
            <summary>
            Gets a description of the output.
            </summary>
            <param name="description">Variable to fill with the description data.</param>
        </member>
        <member name="M:Beholder.Platform.IOutput.GetSupportedDisplayModes">
            <summary>
            Enumerates all the supported display modes.
            </summary>
            <returns>Enumeration of the display mode infos.</returns>
            <seealso cref="T:Beholder.Platform.DisplayMode"/>
        </member>
        <member name="T:Beholder.Platform.IWindow">
            <summary>
            Represents a window that is capable of holding a <see cref="T:Beholder.Platform.ISwapChain"/>.
            </summary>
        </member>
        <member name="P:Beholder.Platform.IWindow.SwapChain">
            <summary>
            Gets the swap chain held by the window.
            </summary>
        </member>
        <member name="P:Beholder.Platform.IWindow.Input">
            <summary>
            Gets the input associated with the window.
            </summary>
        </member>
        <member name="P:Beholder.Platform.IWindow.Closed">
            <summary>
            Indicates whether the window has been closed.
            </summary>
        </member>
        <member name="P:Beholder.Platform.IWindow.ContainsFocus">
            <summary>
            Indicates whether the window contains a keyboard focus.
            </summary>
        </member>
        <member name="F:Beholder.Core.VertexSource.Buffer">
            <summary>
            Vertex buffer from which vertex data is streamed.
            </summary>
        </member>
        <member name="F:Beholder.Core.VertexSource.Offset">
            <summary>
            Byte offset into the buffer to begin streaming the data.
            </summary>
        </member>
        <member name="F:Beholder.Core.VertexSource.Stride">
            <summary>
            Byte stride of one vertex in the buffer.
            </summary>
        </member>
        <member name="M:Beholder.Core.VertexSource.#ctor(Beholder.Resources.IBuffer,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Beholder.Core.VertexSource"/> structure.
            </summary>
            <param name="buffer">Vertex buffer from which vertex data is streamed.</param>
            <param name="offset">Byte offset into the buffer to begin streaming the data.</param>
            <param name="stride">Byte stride of one vertex in the buffer.</param>
        </member>
        <member name="T:Beholder.Platform.AdapterDescription">
            <summary>
            Describes an adapter (or video card).
            </summary>
        </member>
        <member name="F:Beholder.Platform.AdapterDescription.Description">
            <summary>
            A string that contains the adapter description.
            </summary>
        </member>
        <member name="F:Beholder.Platform.AdapterDescription.VendorId">
            <summary>
            The PCI ID of the hardware vendor.
            </summary>
        </member>
        <member name="F:Beholder.Platform.AdapterDescription.DeviceId">
            <summary>
            The PCI ID of the hardware device.
            </summary>
        </member>
        <member name="F:Beholder.Platform.AdapterDescription.SubSysId">
            <summary>
            The PCI ID of the sub system.
            </summary>
        </member>
        <member name="F:Beholder.Platform.AdapterDescription.Revision">
            <summary>
            The PCI ID of the revision number of the adapter.
            </summary>
        </member>
        <member name="F:Beholder.Platform.AdapterDescription.DedicatedVideoMemory">
            <summary>
            The number of bytes of dedicated video memory that are not shared with the CPU.
            Available only on DirectX 10 and higher.
            </summary>
        </member>
        <member name="F:Beholder.Platform.AdapterDescription.DedicatedSystemMemory">
            <summary>
            The number of bytes of dedicated system memory that are not shared with the GPU. This memory is allocated from available system memory at boot time.
            Available only on DirectX 10 and higher.
            </summary>
        </member>
        <member name="F:Beholder.Platform.AdapterDescription.SharedSystemMemory">
            <summary>
            The number of bytes of shared system memory. 
            This is the maximum value of system memory that may be consumed by the adapter during operation. 
            Any incidental memory consumed by the driver as it manages and uses video memory is additional.
            Available only on DirectX 10 and higher.
            </summary>
        </member>
        <member name="F:Beholder.Platform.AdapterDescription.AdapterLuidHigh">
            <summary>
            High bits of the LUID - a unique value that identifies the adapter.
            Available only on DirectX 10 and higher.
            </summary>
        </member>
        <member name="F:Beholder.Platform.AdapterDescription.AdapterLuidLow">
            <summary>
            Low bits of the LUID - a unique value that identifies the adapter.
            Available only on DirectX 10 and higher.
            </summary>
        </member>
        <member name="F:Beholder.Platform.AdapterDescription.Flags">
            <summary>
            A member of the <see cref="T:Beholder.Platform.AdapterFlags"/> enumerated type that describes the adapter type. 
            The <see cref="F:Beholder.Platform.AdapterFlags.Remote"/> flag specifies that the adapter is a remote adapter.
            Available only on DirectX 10 and higher.
            </summary>
        </member>
        <member name="T:Beholder.Platform.AdapterFlags">
            <summary>
            Identifies if an adapter is local or remote.
            </summary>
        </member>
        <member name="F:Beholder.Platform.AdapterFlags.None">
            <summary>
            Specifies no flags.
            </summary>
        </member>
        <member name="F:Beholder.Platform.AdapterFlags.Remote">
            <summary>
            Value always set to 0.
            </summary>
        </member>
        <member name="T:Beholder.Platform.DisplayMode">
            <summary>
            Describes a display mode.
            </summary>
        </member>
        <member name="F:Beholder.Platform.DisplayMode.Width">
            <summary>
            Width of the display.
            </summary>
        </member>
        <member name="F:Beholder.Platform.DisplayMode.Height">
            <summary>
            Height of the display.
            </summary>
        </member>
        <member name="F:Beholder.Platform.DisplayMode.RefreshRate">
            <summary>
            Refresh rate of the display.
            </summary>
        </member>
        <member name="F:Beholder.Platform.DisplayMode.FormatID">
            <summary>
            Format ID of the display.
            </summary>
        </member>
        <member name="M:Beholder.Platform.DisplayMode.#ctor(System.Int32,System.Int32,Beholder.Math.Rational,System.Int32)">
            <summary>
            Creates a new <see cref="T:Beholder.Platform.DisplayMode"/> structure.
            </summary>
            <param name="width">Width of the display.</param>
            <param name="height">Height of the display.</param>
            <param name="refreshRate">Refresh rate of the display.</param>
            <param name="formatID">Format ID of the display.</param>
        </member>
        <member name="T:Beholder.Platform.OutputDescription">
            <summary>
            Describes an output or physical connection between the adapter (video card) and a device.
            </summary>
        </member>
        <member name="F:Beholder.Platform.OutputDescription.DeviceName">
            <summary>
            A string that contains the name of the output device.
            </summary>
        </member>
        <member name="F:Beholder.Platform.OutputDescription.DesctopCoordinates">
            <summary>
            A <see cref="T:Beholder.Math.Rectangle"/> structure containing the bounds of the output in desktop coordinates.
            Available only on DirectX 10 and higher.
            </summary>
        </member>
        <member name="F:Beholder.Platform.OutputDescription.AttachedToDesctop">
            <summary>
            True if the output is attached to the desktop; otherwise, false.
            Available only on DirectX 10 and higher.
            </summary>
        </member>
        <member name="F:Beholder.Platform.OutputDescription.Rotation">
            <summary>
            A member of the <see cref="T:Beholder.Platform.ModeRotation"/> enumerated type describing on how an image is rotated by the output.
            Available only on DirectX 10 and higher.
            </summary>
        </member>
        <member name="F:Beholder.Platform.OutputDescription.MonitorHandle">
            <summary>
            An handle that represents the display monitor.
            </summary>
        </member>
        <member name="T:Beholder.Platform.Sampling">
            <summary>
            Describes multi-sampling parameters for a resource.
            </summary>
        </member>
        <member name="F:Beholder.Platform.Sampling.Count">
            <summary>
            The number of samples per pixel.
            </summary>
        </member>
        <member name="F:Beholder.Platform.Sampling.Quality">
            <summary>
            The image quality level. 
            The higher the quality, the lower the performance. 
            The valid range is between zero and one less than the level returned by <see cref="M:Beholder.Platform.IAdapter.GetMultisampleQualityLevelsCount(System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Beholder.Platform.Sampling.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Creates a new <see cref="T:Beholder.Platform.Sampling"/> structure.
            </summary>
            <param name="count">The number of samples per pixel.</param>
            <param name="quality">The image quality level. 
            The higher the quality, the lower the performance. 
            The valid range is between zero and one less than the level returned by <see cref="M:Beholder.Platform.IAdapter.GetMultisampleQualityLevelsCount(System.Int32,System.Int32)"/>.</param>
        </member>
        <member name="T:Beholder.Platform.SwapChainDescription">
            <summary>
            Describes a swap chain.
            </summary>
        </member>
        <member name="F:Beholder.Platform.SwapChainDescription.ColorBufferCount">
            <summary>
            Number of the swap chain's color buffers.
            Must have at least one, but two are prefered. (Double buffering)
            </summary>
        </member>
        <member name="F:Beholder.Platform.SwapChainDescription.ColorBufferFormatID">
            <summary>
            Format ID of the swap chain's color buffer.
            </summary>
            <remarks>
            You can check format support using the <see cref="T:Beholder.Platform.IAdapter"/> methods.
            </remarks>
        </member>
        <member name="F:Beholder.Platform.SwapChainDescription.EnableAutoDepthStencil">
            <summary>
            Specifies whether the swap chain should use its own (auto) depth-stencil buffer.
            </summary>
        </member>
        <member name="F:Beholder.Platform.SwapChainDescription.DepthStencilFormatID">
            <summary>
            Format ID of the swap chain's auto depth-stencil buffer. If <see cref="F:Beholder.Platform.SwapChainDescription.EnableAutoDepthStencil"/> is set to false, this field is ignored.
            </summary>
            <remarks>
            You can check format support using the <see cref="T:Beholder.Platform.IAdapter"/> methods.
            </remarks>
        </member>
        <member name="F:Beholder.Platform.SwapChainDescription.Sampling">
            <summary>
            A <see cref="F:Beholder.Platform.SwapChainDescription.Sampling"/> structure describing multi-sampling parameters.
            </summary>
            <remarks>
            You can check different sampling modes support using the <see cref="T:Beholder.Platform.IAdapter"/> methods.
            </remarks>
        </member>
        <member name="F:Beholder.Platform.SwapChainDescription.VerticalSync">
            <summary>
            Specifies whether the swap chain should wait for a monitor vertical refresh to present a new frame.
            </summary>
            <remarks>Using this option will remove the "tearing" effect and reduce the chance of the GPU overheat, 
            but may reduce FPS if its non-synchronized value is below monitor's refresh rate.
            </remarks>
        </member>
        <member name="M:Beholder.Platform.SwapChainDescription.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32,Beholder.Platform.Sampling,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Beholder.Platform.SwapChainDescription"/> structure.
            </summary>
            <param name="colorBufferCount">Number of the swap chain's color buffers.</param>
            <param name="colorBufferFormatID">Format of the swap chain's color buffer.</param>
            <param name="enableAutoDepthStencil">Specifies whether the swap chain should use its own (auto) depth-stencil buffer.</param>
            <param name="depthStencilFormatID">Format of the swap chain's auto depth-stencil buffer. If <see cref="F:Beholder.Platform.SwapChainDescription.EnableAutoDepthStencil"/> is set to false, this field is ignored.</param>
            <param name="sampling">A <see cref="F:Beholder.Platform.SwapChainDescription.Sampling"/> structure describing multi-sampling parameters.</param>
            <param name="verticalSync">Specifies whether the swap chain should wait for a monitor vertical refresh to present a new frame.
            <remarks>Using this option will remove the "tearing" effect and reduce the chance of the GPU overheat, 
            but may reduce FPS if its non-synchronized value is below monitor's refresh rate.
            </remarks>
            </param>
        </member>
        <member name="T:Beholder.Resources.BindFlags">
            <summary>
            Identifies how to bind a resource to the pipeline.
            </summary>
        </member>
        <member name="F:Beholder.Resources.BindFlags.None">
            <summary>
            Resource will not be bound to any pipeline stage.
            </summary>
        </member>
        <member name="F:Beholder.Resources.BindFlags.VertexBuffer">
            <summary>
            Bind a buffer as a vertex buffer to the input-assembler stage.
            </summary>
        </member>
        <member name="F:Beholder.Resources.BindFlags.IndexBuffer">
            <summary>
            Bind a buffer as an index buffer to the input-assembler stage.
            </summary>
        </member>
        <member name="F:Beholder.Resources.BindFlags.UniformBuffer">
            <summary>
            Bind a buffer as a uniform buffer to a shader stage; this flag may NOT be combined with any other bind flag.
            </summary>
        </member>
        <member name="F:Beholder.Resources.BindFlags.ShaderResource">
            <summary>
            Bind a buffer or texture to a shader stage.
            </summary>
        </member>
        <member name="F:Beholder.Resources.BindFlags.StreamOutput">
            <summary>
            Bind an output buffer for the stream-output stage.
            </summary>
        </member>
        <member name="F:Beholder.Resources.BindFlags.RenderTarget">
            <summary>
            Bind a texture as a render target for the output-merger stage.
            </summary>
        </member>
        <member name="F:Beholder.Resources.BindFlags.DepthStencil">
            <summary>
            Bind a texture as a depth-stencil target for the output-merger stage.
            </summary>
        </member>
        <member name="F:Beholder.Resources.BindFlags.UnorderedAccess">
            <summary>
            Bind an unordered access resource.
            </summary>
        </member>
        <member name="T:Beholder.Resources.CpuAccessFlags">
            <summary>
            This enumeration is currently unused. Specifies the types of CPU access allowed for a resource.
            </summary>
        </member>
        <member name="F:Beholder.Resources.CpuAccessFlags.None">
            <summary>
            No flags specified.
            </summary>
        </member>
        <member name="F:Beholder.Resources.CpuAccessFlags.Write">
            <summary>
            The resource is to be mappable so that the CPU can change its contents. 
            Resources created with this flag cannot be set as outputs of the pipeline and must be created with either dynamic or staging usage (see <see cref="T:Beholder.Resources.Usage"/>).
            </summary>
        </member>
        <member name="F:Beholder.Resources.CpuAccessFlags.Read">
            <summary>
            The resource is to be mappable so that the CPU can read its contents. 
            Resources created with this flag cannot be set as either inputs or outputs to the pipeline and must be created with staging usage (see <see cref="T:Beholder.Resources.Usage"/>).
            </summary>
        </member>
        <member name="T:Beholder.Resources.MiscFlags">
            <summary>
            Identifies other, less common options for resources.
            </summary>
        </member>
        <member name="F:Beholder.Resources.MiscFlags.None">
            <summary>
            Specifies no flags.
            </summary>
        </member>
        <member name="F:Beholder.Resources.MiscFlags.GenerateMips">
            <summary>
            Enables mipmap generation using <see cref="M:Beholder.Core.IDeviceContext.GenerateMips(Beholder.Resources.IShaderResourceView)"/> on a texture resource. 
            The resource must be created with the bind flags that specify that the resource is a render target and a shader resource.
            </summary>
        </member>
        <member name="F:Beholder.Resources.MiscFlags.TextureCube">
            <summary>
            Enables a resource to be a cube texture created from a Texture2DArray that contains 6 textures.
            </summary>
        </member>
        <member name="F:Beholder.Resources.MiscFlags.DrawInderectArgs">
            <summary>
            Enables instancing of GPU-generated content.
            </summary>
        </member>
        <member name="F:Beholder.Resources.MiscFlags.BufferAllowRawViews">
            <summary>
            Enables a resource as a byte address buffer.
            </summary>
        </member>
        <member name="F:Beholder.Resources.MiscFlags.BufferStructured">
            <summary>
            Enables a resource as a structured buffer.
            </summary>
        </member>
        <member name="T:Beholder.Resources.Usage">
            <summary>
            Identifies expected resource use during rendering. The usage directly reflects whether a resource is accessible by the CPU and/or the GPU.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Usage.Default">
            <summary>
            A resource that requires read and write access by the GPU. This is likely to be the most common usage choice.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Usage.Immutable">
            <summary>
            A resource that can only be read by the GPU. 
            It cannot be written by the GPU, and cannot be accessed at all by the CPU. 
            This type of resource must be initialized when it is created, since it cannot be changed after creation.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Usage.Dynamic">
            <summary>
            A resource that is accessible by both the GPU (read only) and the CPU (write only). 
            A dynamic resource is a good choice for a resource that will be updated by the CPU at least once per frame.
            </summary>
        </member>
        <member name="F:Beholder.Resources.Usage.Staging">
            <summary>
            A resorce that can be written by GPU and read by CPU.
            Use staging-read resources to read the data, generated by the GPU into the system memory without causing a pipeline stall.
            </summary>
        </member>
        <member name="T:Beholder.Core.Filter">
            <summary>
            Filtering options during texture sampling.
            </summary>
        </member>
        <member name="F:Beholder.Core.Filter.MinMagMipPoint">
            <summary>
            Use point sampling for minification, magnification, and mip-level sampling.
            </summary>
        </member>
        <member name="F:Beholder.Core.Filter.MinMagPointMipLinear">
            <summary>
            Use point sampling for minification and magnification; use linear interpolation for mip-level sampling.
            </summary>
        </member>
        <member name="F:Beholder.Core.Filter.MinPointMagLinearMipPoint">
            <summary>
            Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling.
            </summary>
        </member>
        <member name="F:Beholder.Core.Filter.MinPointMagMipLinear">
            <summary>
            Use point sampling for minification; use linear interpolation for magnification and mip-level sampling.
            </summary>
        </member>
        <member name="F:Beholder.Core.Filter.MinLinearMagMipPoint">
            <summary>
            Use linear interpolation for minification; use point sampling for magnification and mip-level sampling.
            </summary>
        </member>
        <member name="F:Beholder.Core.Filter.MinLinearMagPointMipLinear">
            <summary>
            Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling.
            </summary>
        </member>
        <member name="F:Beholder.Core.Filter.MinMagLinearMipPoint">
            <summary>
            Use linear interpolation for minification and magnification; use point sampling for mip-level sampling.
            </summary>
        </member>
        <member name="F:Beholder.Core.Filter.MinMagMipLinear">
            <summary>
            Use linear interpolation for minification, magnification, and mip-level sampling.
            </summary>
        </member>
        <member name="F:Beholder.Core.Filter.Anisotropic">
            <summary>
            Use anisotropic interpolation for minification, magnification, and mip-level sampling.
            </summary>
        </member>
        <member name="F:Beholder.Core.Filter.ComparisonMinMagMipPoint">
            <summary>
            Use point sampling for minification, magnification, and mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:Beholder.Core.Filter.ComparisonMinMagPointMipLinear">
            <summary>
            Use point sampling for minification and magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:Beholder.Core.Filter.ComparisonMinPointMagLinearMipPoint">
            <summary>
            Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:Beholder.Core.Filter.ComparisonMinPointMagMipLinear">
            <summary>
            Use point sampling for minification; use linear interpolation for magnification and mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:Beholder.Core.Filter.ComparisonMinLinearMagMipPoint">
            <summary>
            Use linear interpolation for minification; use point sampling for magnification and mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:Beholder.Core.Filter.ComparisonMinLinearMagPointMipLinear">
            <summary>
            Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:Beholder.Core.Filter.ComparisonMinMagLinearMipPoint">
            <summary>
            Use linear interpolation for minification and magnification; use point sampling for mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:Beholder.Core.Filter.ComparisonMinMagMipLinear">
            <summary>
            Use linear interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:Beholder.Core.Filter.ComparisonAnisotropic">
            <summary>
            Use anisotropic interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="T:Beholder.Core.Comparison">
            <summary>
            Comparison options.
            </summary>
        </member>
        <member name="F:Beholder.Core.Comparison.Never">
            <summary>
            Never pass the comparison.
            </summary>
        </member>
        <member name="F:Beholder.Core.Comparison.Less">
            <summary>
            If the source data is less than the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:Beholder.Core.Comparison.Equal">
            <summary>
            If the source data is equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:Beholder.Core.Comparison.LessEqual">
            <summary>
            If the source data is less than or equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:Beholder.Core.Comparison.Greater">
            <summary>
            If the source data is greater than the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:Beholder.Core.Comparison.NotEqual">
            <summary>
            If the source data is not equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:Beholder.Core.Comparison.GreaterEqual">
            <summary>
            If the source data is greater than or equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:Beholder.Core.Comparison.Always">
            <summary>
            Always pass the comparison.
            </summary>
        </member>
        <member name="T:Beholder.Core.Cull">
            <summary>
            Indicates triangles facing a particular direction are not drawn.
            </summary>
        </member>
        <member name="F:Beholder.Core.Cull.None">
            <summary>
            Always draw all triangles.
            </summary>
        </member>
        <member name="F:Beholder.Core.Cull.Frontface">
            <summary>
            Do not draw triangles that are front-facing.
            </summary>
        </member>
        <member name="F:Beholder.Core.Cull.Backface">
            <summary>
            Do not draw triangles that are back-facing.
            </summary>
        </member>
        <member name="T:Beholder.Core.DepthStencilDescription">
            <summary>
            Describes a depth-stencil state.
            </summary>
            [Serializable]
        </member>
        <member name="F:Beholder.Core.DepthStencilDescription.FrontFaceStencilOp">
            <summary>
            Identifies how to use the results of the depth test and the stencil test for pixels whose surface normal is facing towards the camera.
            </summary>
        </member>
        <member name="F:Beholder.Core.DepthStencilDescription.BackFaceStencilOp">
            <summary>
            Identifies how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away from the camera.
            </summary>
        </member>
        <member name="F:Beholder.Core.DepthStencilDescription.DepthEnable">
            <summary>
            Enable depth testing.
            </summary>
        </member>
        <member name="F:Beholder.Core.DepthStencilDescription.DepthWriteEnable">
            <summary>
            Enable writing to the depth buffer.
            </summary>
        </member>
        <member name="F:Beholder.Core.DepthStencilDescription.DepthFunction">
            <summary>
            A function that compares depth data against existing depth data.
            </summary>
        </member>
        <member name="F:Beholder.Core.DepthStencilDescription.StencilEnable">
            <summary>
            Enable stencil testing.
            </summary>
        </member>
        <member name="F:Beholder.Core.DepthStencilDescription.StencilReadMask">
            <summary>
            Identifies a portion of the depth-stencil buffer for reading stencil data.
            </summary>
        </member>
        <member name="F:Beholder.Core.DepthStencilDescription.StencilWriteMask">
            <summary>
            Identifies a portion of the depth-stencil buffer for writing stencil data.
            </summary>
        </member>
        <member name="M:Beholder.Core.DepthStencilDescription.#ctor(System.Boolean,System.Boolean,Beholder.Core.Comparison,System.Boolean,System.Byte,System.Byte,Beholder.Core.DepthStencilOperationDescription,Beholder.Core.DepthStencilOperationDescription)">
            <summary>
            Creates a new <see cref="T:Beholder.Core.DepthStencilDescription"/> structure.
            </summary>
            <param name="depthEnable">Enable depth testing.</param>
            <param name="depthWriteEnable">Enable writing to the depth buffer.</param>
            <param name="depthFunction">A function that compares depth data against existing depth data.</param>
            <param name="stencilEnable">Enable stencil testing.</param>
            <param name="stencilReadMask">Identifies a portion of the depth-stencil buffer for reading stencil data.</param>
            <param name="stencilWriteMask">Identifies a portion of the depth-stencil buffer for writing stencil data.</param>
            <param name="frontFace">Identifies how to use the results of the depth test and the stencil test for pixels whose surface normal is facing towards the camera.</param>
            <param name="backFace">Identifies how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away from the camera.</param>
        </member>
        <member name="T:Beholder.Core.DepthStencilOperationDescription">
            <summary>
            Stencil operations that can be performed based on the results of stencil test.
            </summary>
        </member>
        <member name="F:Beholder.Core.DepthStencilOperationDescription.StencilFailOperation">
            <summary>
            The stencil operation to perform when stencil testing fails.
            </summary>
        </member>
        <member name="F:Beholder.Core.DepthStencilOperationDescription.StencilDepthFailOperation">
            <summary>
            The stencil operation to perform when stencil testing passes and depth testing fails.
            </summary>
        </member>
        <member name="F:Beholder.Core.DepthStencilOperationDescription.StencilPassOperation">
            <summary>
            The stencil operation to perform when stencil testing and depth testing both pass.
            </summary>
        </member>
        <member name="F:Beholder.Core.DepthStencilOperationDescription.StencilFunction">
            <summary>
            A function that compares stencil data against existing stencil data.
            </summary>
        </member>
        <member name="T:Beholder.Core.FillMode">
            <summary>
            Defines the supported filling modes.
            </summary>
        </member>
        <member name="F:Beholder.Core.FillMode.Wireframe">
            <summary>
            Draw only triangle edges.
            </summary>
        </member>
        <member name="F:Beholder.Core.FillMode.Solid">
            <summary>
            Draw solid triangles.
            </summary>
        </member>
        <member name="T:Beholder.Core.SamplerDescription">
            <summary>
            Describes a sampler state.
            </summary>
        </member>
        <member name="F:Beholder.Core.SamplerDescription.Filter">
            <summary>
            Filtering method to use when sampling a texture.
            </summary>
        </member>
        <member name="F:Beholder.Core.SamplerDescription.AddressU">
            <summary>
            Method to use for resolving a U texture coordinate that is outside the 0 to 1 range.
            </summary>
        </member>
        <member name="F:Beholder.Core.SamplerDescription.AddressV">
            <summary>
            Method to use for resolving a V texture coordinate that is outside the 0 to 1 range.
            </summary>
        </member>
        <member name="F:Beholder.Core.SamplerDescription.AddressW">
            <summary>
            Method to use for resolving a W texture coordinate that is outside the 0 to 1 range.
            </summary>
        </member>
        <member name="F:Beholder.Core.SamplerDescription.MipLodBias">
            <summary>
            Offset from the calculated mipmap level.
            </summary>
        </member>
        <member name="F:Beholder.Core.SamplerDescription.MaximumAnisotropy">
            <summary>
            Clamping value used if Filter.Anisotropic or Filter.ComparisonAnisotropic is specified in Filter. Valid values are between 1 and 16.
            </summary>
        </member>
        <member name="F:Beholder.Core.SamplerDescription.ComparisonFunction">
            <summary>
            A function that compares sampled data against existing sampled data.
            </summary>
        </member>
        <member name="F:Beholder.Core.SamplerDescription.BorderColor">
            <summary>
            Border color to use if TextureAddressMode.Border is specified for AddressU, AddressV, or AddressW. Range must be between 0.0 and 1.0 inclusive.
            </summary>
        </member>
        <member name="F:Beholder.Core.SamplerDescription.MinimumLod">
            <summary>
            Lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed.
            </summary>
        </member>
        <member name="F:Beholder.Core.SamplerDescription.MaximumLod">
            <summary>
            Upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. 
            This value must be greater than or equal to MinimumLod. To have no upper limit on LOD set this to a large value such as System.Single.MaxValue.
            </summary>
        </member>
        <member name="M:Beholder.Core.SamplerDescription.#ctor(Beholder.Core.Filter,Beholder.Core.TextureAddressMode,Beholder.Core.TextureAddressMode,Beholder.Core.TextureAddressMode,System.Single,System.Int32,Beholder.Core.Comparison,Beholder.Math.Color4,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Beholder.Core.SamplerDescription"/> structure.
            </summary>
            <param name="filter">Filtering method to use when sampling a texture.</param>
            <param name="addressU">Method to use for resolving a U texture coordinate that is outside the 0 to 1 range.</param>
            <param name="addressV">Method to use for resolving a V texture coordinate that is outside the 0 to 1 range.</param>
            <param name="addressW">Method to use for resolving a W texture coordinate that is outside the 0 to 1 range.</param>
            <param name="mipLodBias">Offset from the calculated mipmap level.</param>
            <param name="maximumAnisotropy">Clamping value used if Filter.Anisotropic or Filter.ComparisonAnisotropic is specified in Filter. Valid values are between 1 and 16.</param>
            <param name="comparisonFunction">A function that compares sampled data against existing sampled data.</param>
            <param name="borderColor">Border color to use if TextureAddressMode.Border is specified for AddressU, AddressV, or AddressW. Range must be between 0.0 and 1.0 inclusive.</param>
            <param name="minimumLod">Lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed.</param>
            <param name="maximumLod">Upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. 
            This value must be greater than or equal to MinimumLod. To have no upper limit on LOD set this to a large value such as System.Single.MaxValue.</param>
        </member>
        <member name="T:Beholder.Core.PrimitiveTopology">
            <summary>
            How the pipeline interprets vertex data that is bound to the input-assembler stage. 
            These primitive topology values determine how the vertex data is rendered on screen.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.Undefined">
            <summary>
            The IA stage has not been initialized with a primitive topology. 
            The IA stage will not function properly unless a primitive topology is defined.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PointList">
            <summary>
            Interpret the vertex data as a list of points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.LineList">
            <summary>
            Interpret the vertex data as a list of lines.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.LineStrip">
            <summary>
            Interpret the vertex data as a line strip.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.TriangleList">
            <summary>
            Interpret the vertex data as a list of triangles.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.TriangleStrip">
            <summary>
            Interpret the vertex data as a triangle strip.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.LineListWithAdjacency">
            <summary>
            Interpret the vertex data as list of lines with adjacency data.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.LineStripWithAdjacency">
            <summary>
            Interpret the vertex data as line strip with adjacency data.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.TriangleListWithAdjacency">
            <summary>
            Interpret the vertex data as list of triangles with adjacency data.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.TriangleStripWithAdjacency">
            <summary>
            Interpret the vertex data as triangle strip with adjacency data.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList1">
            <summary>
            Interpret the vertex data as a patch list with 1 control point.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList2">
            <summary>
            Interpret the vertex data as a patch list with 2 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList3">
            <summary>
            Interpret the vertex data as a patch list with 3 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList4">
            <summary>
            Interpret the vertex data as a patch list with 4 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList5">
            <summary>
            Interpret the vertex data as a patch list with 5 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList6">
            <summary>
            Interpret the vertex data as a patch list with 6 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList7">
            <summary>
            Interpret the vertex data as a patch list with 7 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList8">
            <summary>
            Interpret the vertex data as a patch list with 8 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList9">
            <summary>
            Interpret the vertex data as a patch list with 9 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList10">
            <summary>
            Interpret the vertex data as a patch list with 10 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList11">
            <summary>
            Interpret the vertex data as a patch list with 11 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList12">
            <summary>
            Interpret the vertex data as a patch list with 12 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList13">
            <summary>
            Interpret the vertex data as a patch list with 13 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList14">
            <summary>
            Interpret the vertex data as a patch list with 14 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList15">
            <summary>
            Interpret the vertex data as a patch list with 15 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList16">
            <summary>
            Interpret the vertex data as a patch list with 16 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList17">
            <summary>
            Interpret the vertex data as a patch list with 17 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList18">
            <summary>
            Interpret the vertex data as a patch list with 18 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList19">
            <summary>
            Interpret the vertex data as a patch list with 19 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList20">
            <summary>
            Interpret the vertex data as a patch list with 20 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList21">
            <summary>
            Interpret the vertex data as a patch list with 21 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList22">
            <summary>
            Interpret the vertex data as a patch list with 22 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList23">
            <summary>
            Interpret the vertex data as a patch list with 23 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList24">
            <summary>
            Interpret the vertex data as a patch list with 24 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList25">
            <summary>
            Interpret the vertex data as a patch list with 25 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList26">
            <summary>
            Interpret the vertex data as a patch list with 26 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList27">
            <summary>
            Interpret the vertex data as a patch list with 27 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList28">
            <summary>
            Interpret the vertex data as a patch list with 28 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList29">
            <summary>
            Interpret the vertex data as a patch list with 29 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList30">
            <summary>
            Interpret the vertex data as a patch list with 30 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList31">
            <summary>
            Interpret the vertex data as a patch list with 31 control points.
            </summary>
        </member>
        <member name="F:Beholder.Core.PrimitiveTopology.PatchList32">
            <summary>
            Interpret the vertex data as a patch list with 32 control points.
            </summary>
        </member>
        <member name="T:Beholder.Core.RasterizerDescription">
            <summary>
            Describes a rasterizer state.
            </summary>
        </member>
        <member name="F:Beholder.Core.RasterizerDescription.DepthBias">
            <summary>
            <para>Depth value added to a given pixel.</para>
            <para>Beware that the depth bias behaves differently on different GPUs.</para>
            </summary>
        </member>
        <member name="F:Beholder.Core.RasterizerDescription.DepthBiasClamp">
            <summary>
            <para>Maximum depth bias of a pixel.</para>
            <para>Beware that the depth bias behaves differently on different GPUs.</para>
            </summary>
        </member>
        <member name="F:Beholder.Core.RasterizerDescription.SlopeScaledDepthBias">
            <summary>
            <para>Scalar on a given pixel's slope.</para>
            <para>Beware that the depth bias behaves differently on different GPUs.</para>
            </summary>
        </member>
        <member name="F:Beholder.Core.RasterizerDescription.FillMode">
            <summary>
            Determines the fill mode to use when rendering.
            </summary>
        </member>
        <member name="F:Beholder.Core.RasterizerDescription.CullMode">
            <summary>
            Indicates triangles facing the specified direction are not drawn.
            </summary>
        </member>
        <member name="F:Beholder.Core.RasterizerDescription.DepthClipEnable">
            <summary>
            Enable clipping based on distance.
            </summary>
        </member>
        <member name="F:Beholder.Core.RasterizerDescription.ScissorEnable">
            <summary>
            Enable scissor-rectangle culling. All pixels ouside an active scissor rectangle are culled.
            </summary>
        </member>
        <member name="F:Beholder.Core.RasterizerDescription.MultisampleEnable">
            <summary>
            Enable multisample antialiasing.
            </summary>
        </member>
        <member name="F:Beholder.Core.RasterizerDescription.AntialiasedLineEnable">
            <summary>
            Enable line antialiasing; only applies if doing line drawing and MultisampleEnable is false.
            </summary>
        </member>
        <member name="F:Beholder.Core.RasterizerDescription.FrontFaceWinding">
            <summary>
            Determines which triangles are considered front-facing and which are back-facing.
            </summary>
        </member>
        <member name="M:Beholder.Core.RasterizerDescription.#ctor(Beholder.Core.FillMode,Beholder.Core.Cull,System.Int32,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Beholder.Math.Winding)">
            <summary>
            Creates a new <see cref="T:Beholder.Core.RasterizerDescription"/> structure.
            </summary>
            <param name="fillMode">Determines the fill mode to use when rendering.</param>
            <param name="cullMode">Indicates triangles facing the specified direction are not drawn.</param>
            <param name="depthBias">
            <para>Depth value added to a given pixel.</para>
            <para>Beware that the depth bias behaves differently on different GPUs.</para></param>
            <param name="depthBiasClamp">
            <para>Maximum depth bias of a pixel.</para>
            <para>Beware that the depth bias behaves differently on different GPUs.</para></param>
            <param name="slopeScaledDepthBias">
            <para>Scalar on a given pixel's slope.</para>
            <para>Beware that the depth bias behaves differently on different GPUs.</para></param>
            <param name="depthClipEnable">Enable clipping based on distance.</param>
            <param name="scissorEnable">Enable scissor-rectangle culling. All pixels ouside an active scissor rectangle are culled.</param>
            <param name="multisampleEnable">Enable multisample antialiasing.</param>
            <param name="antialiasedLineEnable">Enable line antialiasing; only applies if doing line drawing and MultisampleEnable is false.</param>
            <param name="frontFaceWinding">Determines which triangles are considered front-facing and which are back-facing.</param>
        </member>
        <member name="T:Beholder.Core.Viewport">
            <summary>
            Defines the dimensions of a viewport.
            </summary>
            <remarks>
            <para>
            In all cases, Width and Height must be &gt;= 0 and TopLeftX + Width and TopLeftY + Height must be &lt;= VIEWPORT_BOUNDS_MAX.
            </para>
            <para>
            The range for the minimum and maximum viewport size is dependent on the feature level defined by <see cref="T:Beholder.Platform.FeatureLevel"/>.
            For Direct3D11 the range is (-32768, 32767);
            For lower feature levels the range is (-16384, 16383).
            </para>
            </remarks>
        </member>
        <member name="F:Beholder.Core.Viewport.Left">
            <summary>
            X position of the left hand side of the viewport.
            Ranges between VIEWPORT_BOUNDS_MIN and VIEWPORT_BOUNDS_MAX (see remarks).
            </summary>
        </member>
        <member name="F:Beholder.Core.Viewport.Top">
            <summary>
            X position of the left hand side of the viewport.
            Ranges between VIEWPORT_BOUNDS_MIN and VIEWPORT_BOUNDS_MAX (see remarks).
            </summary>
        </member>
        <member name="F:Beholder.Core.Viewport.Width">
            <summary>
            Width of the viewport.
            </summary>
        </member>
        <member name="F:Beholder.Core.Viewport.Height">
            <summary>
            Height of the viewport.
            </summary>
        </member>
        <member name="F:Beholder.Core.Viewport.MinDepth">
            <summary>
            Minimum depth of the viewport. Ranges between 0 and 1.
            </summary>
        </member>
        <member name="F:Beholder.Core.Viewport.MaxDepth">
            <summary>
            Maximum depth of the viewport. Ranges between 0 and 1.
            </summary>
        </member>
        <member name="M:Beholder.Core.Viewport.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Beholder.Core.Viewport"/> structure.
            </summary>
            <param name="width">Width of the viewport.</param>
            <param name="height">Height of the viewport.</param>
        </member>
        <member name="M:Beholder.Core.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Beholder.Core.Viewport"/> structure.
            </summary>
            <param name="left">
            X position of the left hand side of the viewport.
            Ranges between VIEWPORT_BOUNDS_MIN and VIEWPORT_BOUNDS_MAX (see remarks).
            </param>
            <param name="top">
            X position of the left hand side of the viewport.
            Ranges between VIEWPORT_BOUNDS_MIN and VIEWPORT_BOUNDS_MAX (see remarks).</param>
            <param name="width">Width of the viewport.</param>
            <param name="height">Height of the viewport.</param>
        </member>
        <member name="M:Beholder.Core.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new <see cref="T:Beholder.Core.Viewport"/> structure.
            </summary>
            <param name="left">
            X position of the left hand side of the viewport.
            Ranges between VIEWPORT_BOUNDS_MIN and VIEWPORT_BOUNDS_MAX (see remarks).
            </param>
            <param name="top">
            X position of the left hand side of the viewport.
            Ranges between VIEWPORT_BOUNDS_MIN and VIEWPORT_BOUNDS_MAX (see remarks).</param>
            <param name="width">Width of the viewport.</param>
            <param name="height">Height of the viewport.</param>
            <param name="minDepth">Minimum depth of the viewport. Ranges between 0 and 1.</param>
            <param name="maxDepth">Maximum depth of the viewport. Ranges between 0 and 1.</param>
        </member>
        <member name="T:Beholder.Math.Winding">
            <summary>
            Speicifies a winding. (Usually of a triangle in a screen space.
            </summary>
        </member>
        <member name="F:Beholder.Math.Winding.Clockwise">
            <summary>
            Specifies clockwise winding.
            </summary>
        </member>
        <member name="F:Beholder.Math.Winding.CounterClockwise">
            <summary>
            Specifies counterclockwise winding.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.None">
            <summary>
            No key pressed.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Cancel">
            <summary>
            The CANCEL key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Back">
            <summary>
            The BACKSPACE key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Tab">
            <summary>
            The TAB key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Clear">
            <summary>
            The CLEAR key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Enter">
            <summary>
            The ENTER key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.ShiftKey">
            <summary>
            The SHIFT key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.ControlKey">
            <summary>
            The CTRL key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Menu">
            <summary>
            The ALT key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Pause">
            <summary>
            The PAUSE key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.CapsLock">
            <summary>
            The CAPS LOCK key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.KanaMode">
            <summary>
            The IME Kana mode key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.HangulMode">
            <summary>
            The IME Hangul mode key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.JunjaMode">
            <summary>
            The IME Junja mode key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.FinalMode">
            <summary>
            The IME final mode key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.KanjiMode">
            <summary>
            The IME Kanji mode key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.HanjaMode">
            <summary>
            The IME Hanja mode key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Escape">
            <summary>
            The ESC key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.IMEConvert">
            <summary>
            The IME convert key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.IMENonconvert">
            <summary>
            The IME nonconvert key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.IMEAccept">
            <summary>
            The IME accept key, replaces System.Windows.Forms.Keys.IMEAceept.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.IMEModeChange">
            <summary>
            The IME mode change key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Space">
            <summary>
            The SPACEBAR key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.PageUp">
            <summary>
            The PAGE UP key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.PageDown">
            <summary>
            The PAGE DOWN key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.End">
            <summary>
            The END key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Home">
            <summary>
            The HOME key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Left">
            <summary>
            The LEFT ARROW key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Up">
            <summary>
            The UP ARROW key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Right">
            <summary>
            The RIGHT ARROW key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Down">
            <summary>
            The DOWN ARROW key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Select">
            <summary>
            The SELECT key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Print">
            <summary>
            The PRINT key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Execute">
            <summary>
            The EXECUTE key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.PrintScreen">
            <summary>
            The PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Insert">
            <summary>
            The INS key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Delete">
            <summary>
            The DEL key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Help">
            <summary>
            The HELP key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.D0">
            <summary>
            The 0 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.D1">
            <summary>
            The 1 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.D2">
            <summary>
            The 2 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.D3">
            <summary>
            The 3 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.D4">
            <summary>
            The 4 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.D5">
            <summary>
            The 5 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.D6">
            <summary>
            The 6 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.D7">
            <summary>
            The 7 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.D8">
            <summary>
            The 8 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.D9">
            <summary>
            The 9 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.A">
            <summary>
            The A key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.B">
            <summary>
            The B key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.C">
            <summary>
            The C key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.D">
            <summary>
            The D key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.E">
            <summary>
            The E key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F">
            <summary>
            The F key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.G">
            <summary>
            The G key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.H">
            <summary>
            The H key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.I">
            <summary>
            The I key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.J">
            <summary>
            The J key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.K">
            <summary>
            The K key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.L">
            <summary>
            The L key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.M">
            <summary>
            The M key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.N">
            <summary>
            The N key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.O">
            <summary>
            The O key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.P">
            <summary>
            The P key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Q">
            <summary>
            The Q key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.R">
            <summary>
            The R key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.S">
            <summary>
            The S key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.T">
            <summary>
            The T key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.U">
            <summary>
            The U key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.V">
            <summary>
            The V key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.W">
            <summary>
            The W key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.X">
            <summary>
            The X key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Y">
            <summary>
            The Y key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Z">
            <summary>
            The Z key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.LWin">
            <summary>
            The left Windows logo key (Microsoft Natural Keyboard).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.RWin">
            <summary>
            The right Windows logo key (Microsoft Natural Keyboard).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Apps">
            <summary>
            The application key (Microsoft Natural Keyboard).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Sleep">
            <summary>
            The computer sleep key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.NumPad0">
            <summary>
            The 0 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.NumPad1">
            <summary>
            The 1 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.NumPad2">
            <summary>
            The 2 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.NumPad3">
            <summary>
            The 3 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.NumPad4">
            <summary>
            The 4 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.NumPad5">
            <summary>
            The 5 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.NumPad6">
            <summary>
            The 6 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.NumPad7">
            <summary>
            The 7 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.NumPad8">
            <summary>
            The 8 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.NumPad9">
            <summary>
            The 9 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Multiply">
            <summary>
            The multiply key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Add">
            <summary>
            The add key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Separator">
            <summary>
            The separator key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Subtract">
            <summary>
            The subtract key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Decimal">
            <summary>
            The decimal key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Divide">
            <summary>
            The divide key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F1">
            <summary>
            The F1 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F2">
            <summary>
            The F2 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F3">
            <summary>
            The F3 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F4">
            <summary>
            The F4 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F5">
            <summary>
            The F5 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F6">
            <summary>
            The F6 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F7">
            <summary>
            The F7 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F8">
            <summary>
            The F8 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F9">
            <summary>
            The F9 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F10">
            <summary>
            The F10 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F11">
            <summary>
            The F11 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F12">
            <summary>
            The F12 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F13">
            <summary>
            The F13 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F14">
            <summary>
            The F14 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F15">
            <summary>
            The F15 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F16">
            <summary>
            The F16 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F17">
            <summary>
            The F17 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F18">
            <summary>
            The F18 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F19">
            <summary>
            The F19 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F20">
            <summary>
            The F20 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F21">
            <summary>
            The F21 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F22">
            <summary>
            The F22 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F23">
            <summary>
            The F23 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.F24">
            <summary>
            The F24 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.NumLock">
            <summary>
            The NUM LOCK key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Scroll">
            <summary>
            The SCROLL LOCK key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.OemFjJisho">
            <summary>
            'Dictionary' key
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.OemFjMasshou">
            <summary>
            'Unregister word' key
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.OemFjTouroku">
            <summary>
            'Register word' key
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.OemFjLOya">
            <summary>
            'Left OYAYUBI' key
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.OemFjROya">
            <summary>
            'Right OYAYUBI' key
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.LShiftKey">
            <summary>
            The left SHIFT key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.RShiftKey">
            <summary>
            The right SHIFT key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.LControlKey">
            <summary>
            The left CTRL key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.RControlKey">
            <summary>
            The right CTRL key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.LMenu">
            <summary>
            The left ALT key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.RMenu">
            <summary>
            The right ALT key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.BrowserBack">
            <summary>
            The browser back key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.BrowserForward">
            <summary>
            The browser forward key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.BrowserRefresh">
            <summary>
            The browser refresh key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.BrowserStop">
            <summary>
            The browser stop key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.BrowserSearch">
            <summary>
            The browser search key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.BrowserFavorites">
            <summary>
            The browser favorites key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.BrowserHome">
            <summary>
            The browser home key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.VolumeMute">
            <summary>
            The volume mute key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.VolumeDown">
            <summary>
            The volume down key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.VolumeUp">
            <summary>
            The volume up key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.MediaNextTrack">
            <summary>
            The media next track key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.MediaPreviousTrack">
            <summary>
            The media previous track key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.MediaStop">
            <summary>
            The media Stop key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.MediaPlayPause">
            <summary>
            The media play pause key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.LaunchMail">
            <summary>
            The launch mail key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.SelectMedia">
            <summary>
            The select media key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.LaunchApplication1">
            <summary>
            The start application one key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.LaunchApplication2">
            <summary>
            The start application two key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.OemSemicolon">
            <summary>
            The OEM Semicolon key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Oemplus">
            <summary>
            The OEM plus key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.OemComma">
            <summary>
            The OEM comma key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.OemMinus">
            <summary>
            The OEM minus key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.OemPeriod">
            <summary>
            The OEM period key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.OemQuestion">
            <summary>
            The OEM question mark key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.OemTilde">
            <summary>
            The OEM tilde key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.OemOpenBrackets">
            <summary>
            The OEM open bracket key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.OemPipe">
            <summary>
            The OEM pipe key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.OemCloseBrackets">
            <summary>
            The OEM close bracket key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.OemQuotes">
            <summary>
            The OEM singled/double quote key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Oem8">
            <summary>
            The OEM 8 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.OemBackslash">
            <summary>
            The OEM angle bracket or backslash key on the RT 102 key keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.ProcessKey">
            <summary>
            The PROCESS KEY key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Packet">
            <summary>
            Used to pass Unicode characters as if they were keystrokes. The Packet key
                value is the low word of a 32-bit virtual-key value used for non-keyboard
                input methods.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Attn">
            <summary>
            The ATTN key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Crsel">
            <summary>
            The CRSEL key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Exsel">
            <summary>
            The EXSEL key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.EraseEof">
            <summary>
            The ERASE EOF key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Play">
            <summary>
            The PLAY key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Zoom">
            <summary>
            The ZOOM key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.NoName">
            <summary>
            A constant reserved for future use.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.Pa1">
            <summary>
            The PA1 key.
            </summary>
        </member>
        <member name="F:Beholder.Input.Keys.OemClear">
            <summary>
            The CLEAR key.
            </summary>
        </member>
        <member name="T:Beholder.Math.QuaternionBasedTransform">
            <summary>
            Represents an interpolatable transformantion with the order Translation -> Scaling -> Rotation.
            </summary>
        </member>
        <member name="F:Beholder.Math.QuaternionBasedTransform.Translation">
            <summary>
            Rotation matrix.
            </summary>
        </member>
        <member name="F:Beholder.Math.QuaternionBasedTransform.Scaling">
            <summary>
            Uniform scaling.
            </summary>
        </member>
        <member name="F:Beholder.Math.QuaternionBasedTransform.Rotation">
            <summary>
            Unit quaternion that represents a rotation.
            </summary>
        </member>
        <member name="T:Beholder.Math.Handedness">
            <summary>
            Handedness of three-dimentional orthonormal coordinate system.
            </summary>
        </member>
        <member name="F:Beholder.Math.Handedness.Right">
            <summary>
            Right-hand coordinates.
            </summary>
        </member>
        <member name="F:Beholder.Math.Handedness.Left">
            <summary>
            Left-hand coordinates.
            </summary>
        </member>
        <member name="M:Beholder.Math.MathHelper.Sin(System.Single)">
            <summary>
            Returns a sine of the specified angle
            </summary>
            <param name="a">Angle</param>
            <returns></returns>
        </member>
        <member name="M:Beholder.Math.MathHelper.Cos(System.Single)">
            <summary>
            Returns a cosine of the specified angle
            </summary>
            <param name="a">Angle</param>
            <returns></returns>
        </member>
        <member name="M:Beholder.Math.MathHelper.Asin(System.Single)">
            <summary>
            Returns the angle whose sine is the specified number.
            </summary>
            <param name="x">A number representing a sine, where -1 ≤ x ≤ 1.</param>
            <returns></returns>
        </member>
        <member name="M:Beholder.Math.MathHelper.Acos(System.Single)">
            <summary>
            Returns the angle whose cosine is the specified number.
            </summary>
            <param name="x">A number representing a cosine, where -1 ≤ x ≤ 1.</param>
        </member>
        <member name="M:Beholder.Math.MathHelper.Pow(System.Single,System.Single)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="b">Number to be raised to a power.</param>
            <param name="e">Number that specifies a power.</param>
        </member>
        <member name="M:Beholder.Math.MathHelper.Sqrt(System.Single)">
            <summary>
            Returns a square root of a specified number
            </summary>
        </member>
        <member name="F:Beholder.Math.Matrix3x3.C1">
            <summary>
            First matrix column
            </summary>
        </member>
        <member name="F:Beholder.Math.Matrix3x3.C2">
            <summary>
            Second matrix column
            </summary>
        </member>
        <member name="F:Beholder.Math.Matrix3x3.C3">
            <summary>
            Third matrix column
            </summary>
        </member>
        <member name="F:Beholder.Math.Matrix4x4.C1">
            <summary>
            First matrix column
            </summary>
        </member>
        <member name="F:Beholder.Math.Matrix4x4.C2">
            <summary>
            Second matrix column
            </summary>
        </member>
        <member name="F:Beholder.Math.Matrix4x4.C3">
            <summary>
            Third matrix column
            </summary>
        </member>
        <member name="F:Beholder.Math.Matrix4x4.C4">
            <summary>
            Fourth matrix column
            </summary>
        </member>
        <member name="F:Beholder.Math.Matrix4x3.C1">
            <summary>
            First matrix column
            </summary>
        </member>
        <member name="F:Beholder.Math.Matrix4x3.C2">
            <summary>
            Second matrix column
            </summary>
        </member>
        <member name="F:Beholder.Math.Matrix4x3.C3">
            <summary>
            Third matrix column
            </summary>
        </member>
        <member name="F:Beholder.Math.MatrixBasedTransform.Translation">
            <summary>
            Three-dimentional translation.
            </summary>
        </member>
        <member name="F:Beholder.Math.MatrixBasedTransform.Scaling">
            <summary>
            Uniform scaling.
            </summary>
        </member>
        <member name="F:Beholder.Math.MatrixBasedTransform.Rotation">
            <summary>
            Rotation matrix.
            </summary>
        </member>
        <member name="P:Beholder.Math.Vector2.Zero">
            <summary>
            Returns a new vector with all coordinates equal to zero.
            </summary>
        </member>
        <member name="P:Beholder.Math.Vector2.UnitX">
            <summary>
            Returns a {1, 0} vector.
            </summary>
        </member>
        <member name="P:Beholder.Math.Vector2.UnitY">
            <summary>
            Returns a {0, 1} vector.
            </summary>
        </member>
        <member name="P:Beholder.Math.Vector3.Zero">
            <summary>
            Returns a new vector with all coordinates equal to zero
            </summary>
        </member>
        <member name="P:Beholder.Math.Vector3.UnitX">
            <summary>
            Returns a {1, 0, 0} vector
            </summary>
        </member>
        <member name="P:Beholder.Math.Vector3.UnitY">
            <summary>
            Returns a {0, 1, 0} vector
            </summary>
        </member>
        <member name="P:Beholder.Math.Vector3.UnitZ">
            <summary>
            Returns a {0, 0, 1} vector
            </summary>
        </member>
        <member name="P:Beholder.Math.Vector4.Zero">
            <summary>
            Returns a new vector with all coordinates equal to zero
            </summary>
        </member>
        <member name="P:Beholder.Math.Vector4.UnitX">
            <summary>
            Returns a {1, 0, 0, 0} vector
            </summary>
        </member>
        <member name="P:Beholder.Math.Vector4.UnitY">
            <summary>
            Returns a {0, 1, 0, 0} vector
            </summary>
        </member>
        <member name="P:Beholder.Math.Vector4.UnitZ">
            <summary>
            Returns a {0, 0, 1, 0} vector
            </summary>
        </member>
        <member name="P:Beholder.Math.Vector4.UnitW">
            <summary>
            Returns a {0, 0, 0, 1} vector
            </summary>
        </member>
        <member name="T:Beholder.Utility.Delegates.ActionRef`1">
            <summary>
            Encapsulates a method that has a single ref parameter and does not return a value.
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
            <param name="obj">The parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Beholder.Utility.Collections.IndexValuePair`1">
            <summary>
            Pair of a value and its index. Used for iteration through a LazyList.
            </summary>
            <typeparam name="T">Type of the value to hold.</typeparam>
        </member>
        <member name="F:Beholder.Utility.Collections.IndexValuePair`1.Index">
            <summary>
            Index of the value.
            </summary>
        </member>
        <member name="F:Beholder.Utility.Collections.IndexValuePair`1.Value">
            <summary>
            Value being held.
            </summary>
        </member>
        <member name="M:Beholder.Utility.Collections.IndexValuePair`1.#ctor(System.Int32,`0)">
            <summary>
            Creates a new IndexValuePair structure.
            </summary>
            <param name="index">Index of the value.</param>
            <param name="value">Value to be held.</param>
        </member>
        <member name="T:Beholder.Utility.Collections.LazyList`1">
            <summary>
            List that does not change the indices of added elements.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Beholder.Utility.Collections.LazyList`1.#ctor">
            <summary>
            Creates a new instance of a LazyList class.
            </summary>
        </member>
        <member name="M:Beholder.Utility.Collections.LazyList`1.#ctor(System.Int32)">
            <summary>
            Creates a new instance of a LazyList class specifying the inital capacity of the internal structure.
            </summary>
            <param name="initialCapacity">Inital capacity of the internal structure</param>
        </member>
        <member name="M:Beholder.Utility.Collections.LazyList`1.GetValue(System.Int32)">
            <summary>
            Gets the element at a specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>Element at a specified index</returns>
        </member>
        <member name="M:Beholder.Utility.Collections.LazyList`1.Add(System.Func{System.Int32,`0})">
            <summary>
            Adds an object to the list taking its index into account.
            </summary>
            <param name="constructor">Constructor of the object that uses an element's index in the list.</param>
            <returns>Object that was added.</returns>
        </member>
        <member name="M:Beholder.Utility.Collections.LazyList`1.Add(`0)">
            <summary>
            Adds an object to the list.
            </summary>
            <param name="item">Object to add.</param>
            <returns>Index of the added object.</returns>
        </member>
        <member name="M:Beholder.Utility.Collections.LazyList`1.Clear">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="M:Beholder.Utility.Collections.LazyList`1.Contains(`0)">
            <summary>
            Determines whether the element is in the list.
            </summary>
            <param name="item">The object to locate in the list.</param>
            <returns>True if the element is in the list. False otherwise.</returns>
        </member>
        <member name="M:Beholder.Utility.Collections.LazyList`1.Remove(`0)">
            <summary>
            Removes a first occurence of a specific object from the list.
            </summary>
            <param name="item">The object to remove from the list.</param>
            <returns>True if the object was deleted. False otherwise.</returns>
        </member>
        <member name="M:Beholder.Utility.Collections.LazyList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the list.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Beholder.Utility.Collections.LazyList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the index-value pairs of the elements in the list.
            </summary>
        </member>
        <member name="P:Beholder.Utility.Collections.LazyList`1.Count">
            <summary>
            Gets the number of elements actually contained in the LazyList.
            </summary>
        </member>
        <member name="P:Beholder.Utility.Collections.LazyList`1.Capacity">
            <summary>
            Gets the total number of elements the internal data structure can hold without resizing.
            </summary>
        </member>
        <member name="P:Beholder.Utility.Collections.LazyList`1.HasHoles">
            <summary>
            Indicates whether there are empty slots in the list between 0 and Count - 1 indices.
            </summary>
        </member>
        <member name="P:Beholder.Utility.Collections.LazyList`1.Item(System.Int32)">
            <summary>
            Gets the element at a specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>Element at a specified index</returns>
        </member>
        <member name="P:Beholder.Utility.Collections.LazyList`1.Values">
            <summary>
            Gets a collection containing values in the list.
            </summary>
        </member>
        <member name="T:Beholder.Utility.ShouldNeverHappenException">
            <summary>
            An exception that should never happen.
            </summary>
        </member>
    </members>
</doc>
